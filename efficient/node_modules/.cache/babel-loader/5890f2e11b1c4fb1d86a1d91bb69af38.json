{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RichTextContentBlock = void 0;\nexports.parsePlainText = parsePlainText;\nexports.parseRichText = parseRichText;\nexports.truncateText = truncateText;\n\nvar imageHelper = _interopRequireWildcard(require(\"../helper/image.js\"));\n\nvar _util = require(\"../../core/util.js\");\n\nvar _text = require(\"../../contain/text.js\");\n\nvar STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\n\nfunction truncateText(text, containerWidth, font, ellipsis, options) {\n  if (!containerWidth) {\n    return '';\n  }\n\n  var textLines = (text + '').split('\\n');\n  options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n\n  for (var i = 0, len = textLines.length; i < len; i++) {\n    textLines[i] = truncateSingleLine(textLines[i], options);\n  }\n\n  return textLines.join('\\n');\n}\n\nfunction prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n  options = options || {};\n  var preparedOpts = (0, _util.extend)({}, options);\n  preparedOpts.font = font;\n  ellipsis = (0, _util.retrieve2)(ellipsis, '...');\n  preparedOpts.maxIterations = (0, _util.retrieve2)(options.maxIterations, 2);\n  var minChar = preparedOpts.minChar = (0, _util.retrieve2)(options.minChar, 0);\n  preparedOpts.cnCharWidth = (0, _text.getWidth)('å›½', font);\n  var ascCharWidth = preparedOpts.ascCharWidth = (0, _text.getWidth)('a', font);\n  preparedOpts.placeholder = (0, _util.retrieve2)(options.placeholder, '');\n  var contentWidth = containerWidth = Math.max(0, containerWidth - 1);\n\n  for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n    contentWidth -= ascCharWidth;\n  }\n\n  var ellipsisWidth = (0, _text.getWidth)(ellipsis, font);\n\n  if (ellipsisWidth > contentWidth) {\n    ellipsis = '';\n    ellipsisWidth = 0;\n  }\n\n  contentWidth = containerWidth - ellipsisWidth;\n  preparedOpts.ellipsis = ellipsis;\n  preparedOpts.ellipsisWidth = ellipsisWidth;\n  preparedOpts.contentWidth = contentWidth;\n  preparedOpts.containerWidth = containerWidth;\n  return preparedOpts;\n}\n\nfunction truncateSingleLine(textLine, options) {\n  var containerWidth = options.containerWidth;\n  var font = options.font;\n  var contentWidth = options.contentWidth;\n\n  if (!containerWidth) {\n    return '';\n  }\n\n  var lineWidth = (0, _text.getWidth)(textLine, font);\n\n  if (lineWidth <= containerWidth) {\n    return textLine;\n  }\n\n  for (var j = 0;; j++) {\n    if (lineWidth <= contentWidth || j >= options.maxIterations) {\n      textLine += options.ellipsis;\n      break;\n    }\n\n    var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;\n    textLine = textLine.substr(0, subLength);\n    lineWidth = (0, _text.getWidth)(textLine, font);\n  }\n\n  if (textLine === '') {\n    textLine = options.placeholder;\n  }\n\n  return textLine;\n}\n\nfunction estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n  var width = 0;\n  var i = 0;\n\n  for (var len = text.length; i < len && width < contentWidth; i++) {\n    var charCode = text.charCodeAt(i);\n    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;\n  }\n\n  return i;\n}\n\nfunction parsePlainText(text, style) {\n  text != null && (text += '');\n  var overflow = style.overflow;\n  var padding = style.padding;\n  var font = style.font;\n  var truncate = overflow === 'truncate';\n  var calculatedLineHeight = (0, _text.getLineHeight)(font);\n  var lineHeight = (0, _util.retrieve2)(style.lineHeight, calculatedLineHeight);\n  var bgColorDrawn = !!style.backgroundColor;\n  var truncateLineOverflow = style.lineOverflow === 'truncate';\n  var width = style.width;\n  var lines;\n\n  if (width != null && (overflow === 'break' || overflow === 'breakAll')) {\n    lines = text ? wrapText(text, style.font, width, overflow === 'breakAll', 0).lines : [];\n  } else {\n    lines = text ? text.split('\\n') : [];\n  }\n\n  var contentHeight = lines.length * lineHeight;\n  var height = (0, _util.retrieve2)(style.height, contentHeight);\n\n  if (contentHeight > height && truncateLineOverflow) {\n    var lineCount = Math.floor(height / lineHeight);\n    lines = lines.slice(0, lineCount);\n  }\n\n  if (text && truncate && width != null) {\n    var options = prepareTruncateOptions(width, font, style.ellipsis, {\n      minChar: style.truncateMinChar,\n      placeholder: style.placeholder\n    });\n\n    for (var i = 0; i < lines.length; i++) {\n      lines[i] = truncateSingleLine(lines[i], options);\n    }\n  }\n\n  var outerHeight = height;\n  var contentWidth = 0;\n\n  for (var i = 0; i < lines.length; i++) {\n    contentWidth = Math.max((0, _text.getWidth)(lines[i], font), contentWidth);\n  }\n\n  if (width == null) {\n    width = contentWidth;\n  }\n\n  var outerWidth = contentWidth;\n\n  if (padding) {\n    outerHeight += padding[0] + padding[2];\n    outerWidth += padding[1] + padding[3];\n    width += padding[1] + padding[3];\n  }\n\n  if (bgColorDrawn) {\n    outerWidth = width;\n  }\n\n  return {\n    lines: lines,\n    height: height,\n    outerWidth: outerWidth,\n    outerHeight: outerHeight,\n    lineHeight: lineHeight,\n    calculatedLineHeight: calculatedLineHeight,\n    contentWidth: contentWidth,\n    contentHeight: contentHeight,\n    width: width\n  };\n}\n\nvar RichTextToken = function () {\n  function RichTextToken() {}\n\n  return RichTextToken;\n}();\n\nvar RichTextLine = function () {\n  function RichTextLine(tokens) {\n    this.tokens = [];\n\n    if (tokens) {\n      this.tokens = tokens;\n    }\n  }\n\n  return RichTextLine;\n}();\n\nvar RichTextContentBlock = function () {\n  function RichTextContentBlock() {\n    this.width = 0;\n    this.height = 0;\n    this.contentWidth = 0;\n    this.contentHeight = 0;\n    this.outerWidth = 0;\n    this.outerHeight = 0;\n    this.lines = [];\n  }\n\n  return RichTextContentBlock;\n}();\n\nexports.RichTextContentBlock = RichTextContentBlock;\n\nfunction parseRichText(text, style) {\n  var contentBlock = new RichTextContentBlock();\n  text != null && (text += '');\n\n  if (!text) {\n    return contentBlock;\n  }\n\n  var topWidth = style.width;\n  var topHeight = style.height;\n  var overflow = style.overflow;\n  var wrapInfo = (overflow === 'break' || overflow === 'breakAll') && topWidth != null ? {\n    width: topWidth,\n    accumWidth: 0,\n    breakAll: overflow === 'breakAll'\n  } : null;\n  var lastIndex = STYLE_REG.lastIndex = 0;\n  var result;\n\n  while ((result = STYLE_REG.exec(text)) != null) {\n    var matchedIndex = result.index;\n\n    if (matchedIndex > lastIndex) {\n      pushTokens(contentBlock, text.substring(lastIndex, matchedIndex), style, wrapInfo);\n    }\n\n    pushTokens(contentBlock, result[2], style, wrapInfo, result[1]);\n    lastIndex = STYLE_REG.lastIndex;\n  }\n\n  if (lastIndex < text.length) {\n    pushTokens(contentBlock, text.substring(lastIndex, text.length), style, wrapInfo);\n  }\n\n  var pendingList = [];\n  var calculatedHeight = 0;\n  var calculatedWidth = 0;\n  var stlPadding = style.padding;\n  var truncate = overflow === 'truncate';\n  var truncateLine = style.lineOverflow === 'truncate';\n\n  function finishLine(line, lineWidth, lineHeight) {\n    line.width = lineWidth;\n    line.lineHeight = lineHeight;\n    calculatedHeight += lineHeight;\n    calculatedWidth = Math.max(calculatedWidth, lineWidth);\n  }\n\n  outer: for (var i = 0; i < contentBlock.lines.length; i++) {\n    var line = contentBlock.lines[i];\n    var lineHeight = 0;\n    var lineWidth = 0;\n\n    for (var j = 0; j < line.tokens.length; j++) {\n      var token = line.tokens[j];\n      var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n      var textPadding = token.textPadding = tokenStyle.padding;\n      var paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;\n      var font = token.font = tokenStyle.font || style.font;\n      token.contentHeight = (0, _text.getLineHeight)(font);\n      var tokenHeight = (0, _util.retrieve2)(tokenStyle.height, token.contentHeight);\n      token.innerHeight = tokenHeight;\n      textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n      token.height = tokenHeight;\n      token.lineHeight = (0, _util.retrieve3)(tokenStyle.lineHeight, style.lineHeight, tokenHeight);\n      token.align = tokenStyle && tokenStyle.align || style.align;\n      token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || 'middle';\n\n      if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {\n        if (j > 0) {\n          line.tokens = line.tokens.slice(0, j);\n          finishLine(line, lineWidth, lineHeight);\n          contentBlock.lines = contentBlock.lines.slice(0, i + 1);\n        } else {\n          contentBlock.lines = contentBlock.lines.slice(0, i);\n        }\n\n        break outer;\n      }\n\n      var styleTokenWidth = tokenStyle.width;\n      var tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === 'auto';\n\n      if (typeof styleTokenWidth === 'string' && styleTokenWidth.charAt(styleTokenWidth.length - 1) === '%') {\n        token.percentWidth = styleTokenWidth;\n        pendingList.push(token);\n        token.contentWidth = (0, _text.getWidth)(token.text, font);\n      } else {\n        if (tokenWidthNotSpecified) {\n          var textBackgroundColor = tokenStyle.backgroundColor;\n          var bgImg = textBackgroundColor && textBackgroundColor.image;\n\n          if (bgImg) {\n            bgImg = imageHelper.findExistImage(bgImg);\n\n            if (imageHelper.isImageReady(bgImg)) {\n              token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);\n            }\n          }\n        }\n\n        var remainTruncWidth = truncate && topWidth != null ? topWidth - lineWidth : null;\n\n        if (remainTruncWidth != null && remainTruncWidth < token.width) {\n          if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {\n            token.text = '';\n            token.width = token.contentWidth = 0;\n          } else {\n            token.text = truncateText(token.text, remainTruncWidth - paddingH, font, style.ellipsis, {\n              minChar: style.truncateMinChar\n            });\n            token.width = token.contentWidth = (0, _text.getWidth)(token.text, font);\n          }\n        } else {\n          token.contentWidth = (0, _text.getWidth)(token.text, font);\n        }\n      }\n\n      token.width += paddingH;\n      lineWidth += token.width;\n      tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n    }\n\n    finishLine(line, lineWidth, lineHeight);\n  }\n\n  contentBlock.outerWidth = contentBlock.width = (0, _util.retrieve2)(topWidth, calculatedWidth);\n  contentBlock.outerHeight = contentBlock.height = (0, _util.retrieve2)(topHeight, calculatedHeight);\n  contentBlock.contentHeight = calculatedHeight;\n  contentBlock.contentWidth = calculatedWidth;\n\n  if (stlPadding) {\n    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n  }\n\n  for (var i = 0; i < pendingList.length; i++) {\n    var token = pendingList[i];\n    var percentWidth = token.percentWidth;\n    token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;\n  }\n\n  return contentBlock;\n}\n\nfunction pushTokens(block, str, style, wrapInfo, styleName) {\n  var isEmptyStr = str === '';\n  var tokenStyle = styleName && style.rich[styleName] || {};\n  var lines = block.lines;\n  var font = tokenStyle.font || style.font;\n  var newLine = false;\n  var strLines;\n  var linesWidths;\n\n  if (wrapInfo) {\n    var tokenPadding = tokenStyle.padding;\n    var tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;\n\n    if (tokenStyle.width != null && tokenStyle.width !== 'auto') {\n      var outerWidth_1 = (0, _text.parsePercent)(tokenStyle.width, wrapInfo.width) + tokenPaddingH;\n\n      if (lines.length > 0) {\n        if (outerWidth_1 + wrapInfo.accumWidth > wrapInfo.width) {\n          strLines = str.split('\\n');\n          newLine = true;\n        }\n      }\n\n      wrapInfo.accumWidth = outerWidth_1;\n    } else {\n      var res = wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);\n      wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;\n      linesWidths = res.linesWidths;\n      strLines = res.lines;\n    }\n  } else {\n    strLines = str.split('\\n');\n  }\n\n  for (var i = 0; i < strLines.length; i++) {\n    var text = strLines[i];\n    var token = new RichTextToken();\n    token.styleName = styleName;\n    token.text = text;\n    token.isLineHolder = !text && !isEmptyStr;\n\n    if (typeof tokenStyle.width === 'number') {\n      token.width = tokenStyle.width;\n    } else {\n      token.width = linesWidths ? linesWidths[i] : (0, _text.getWidth)(text, font);\n    }\n\n    if (!i && !newLine) {\n      var tokens = (lines[lines.length - 1] || (lines[0] = new RichTextLine())).tokens;\n      var tokensLen = tokens.length;\n      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : (text || !tokensLen || isEmptyStr) && tokens.push(token);\n    } else {\n      lines.push(new RichTextLine([token]));\n    }\n  }\n}\n\nfunction isLatin(ch) {\n  var code = ch.charCodeAt(0);\n  return code >= 0x21 && code <= 0x17F;\n}\n\nvar breakCharMap = (0, _util.reduce)(',&?/;] '.split(''), function (obj, ch) {\n  obj[ch] = true;\n  return obj;\n}, {});\n\nfunction isWordBreakChar(ch) {\n  if (isLatin(ch)) {\n    if (breakCharMap[ch]) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction wrapText(text, font, lineWidth, isBreakAll, lastAccumWidth) {\n  var lines = [];\n  var linesWidths = [];\n  var line = '';\n  var currentWord = '';\n  var currentWordWidth = 0;\n  var accumWidth = 0;\n\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n\n    if (ch === '\\n') {\n      if (currentWord) {\n        line += currentWord;\n        accumWidth += currentWordWidth;\n      }\n\n      lines.push(line);\n      linesWidths.push(accumWidth);\n      line = '';\n      currentWord = '';\n      currentWordWidth = 0;\n      accumWidth = 0;\n      continue;\n    }\n\n    var chWidth = (0, _text.getWidth)(ch, font);\n    var inWord = isBreakAll ? false : !isWordBreakChar(ch);\n\n    if (!lines.length ? lastAccumWidth + accumWidth + chWidth > lineWidth : accumWidth + chWidth > lineWidth) {\n      if (!accumWidth) {\n        if (inWord) {\n          lines.push(currentWord);\n          linesWidths.push(currentWordWidth);\n          currentWord = ch;\n          currentWordWidth = chWidth;\n        } else {\n          lines.push(ch);\n          linesWidths.push(chWidth);\n        }\n      } else if (line || currentWord) {\n        if (inWord) {\n          if (!line) {\n            line = currentWord;\n            currentWord = '';\n            currentWordWidth = 0;\n            accumWidth = currentWordWidth;\n          }\n\n          lines.push(line);\n          linesWidths.push(accumWidth - currentWordWidth);\n          currentWord += ch;\n          currentWordWidth += chWidth;\n          line = '';\n          accumWidth = currentWordWidth;\n        } else {\n          if (currentWord) {\n            line += currentWord;\n            currentWord = '';\n            currentWordWidth = 0;\n          }\n\n          lines.push(line);\n          linesWidths.push(accumWidth);\n          line = ch;\n          accumWidth = chWidth;\n        }\n      }\n\n      continue;\n    }\n\n    accumWidth += chWidth;\n\n    if (inWord) {\n      currentWord += ch;\n      currentWordWidth += chWidth;\n    } else {\n      if (currentWord) {\n        line += currentWord;\n        currentWord = '';\n        currentWordWidth = 0;\n      }\n\n      line += ch;\n    }\n  }\n\n  if (!lines.length && !line) {\n    line = text;\n    currentWord = '';\n    currentWordWidth = 0;\n  }\n\n  if (currentWord) {\n    line += currentWord;\n  }\n\n  if (line) {\n    lines.push(line);\n    linesWidths.push(accumWidth);\n  }\n\n  if (lines.length === 1) {\n    accumWidth += lastAccumWidth;\n  }\n\n  return {\n    accumWidth: accumWidth,\n    lines: lines,\n    linesWidths: linesWidths\n  };\n}","map":{"version":3,"names":["STYLE_REG","truncateText","text","containerWidth","font","ellipsis","options","textLines","split","prepareTruncateOptions","i","len","length","truncateSingleLine","join","preparedOpts","extend","retrieve2","maxIterations","minChar","cnCharWidth","getWidth","ascCharWidth","placeholder","contentWidth","Math","max","ellipsisWidth","textLine","lineWidth","j","subLength","estimateLength","floor","substr","width","charCode","charCodeAt","parsePlainText","style","overflow","padding","truncate","calculatedLineHeight","getLineHeight","lineHeight","bgColorDrawn","backgroundColor","truncateLineOverflow","lineOverflow","lines","wrapText","contentHeight","height","lineCount","slice","truncateMinChar","outerHeight","outerWidth","RichTextToken","RichTextLine","tokens","RichTextContentBlock","parseRichText","contentBlock","topWidth","topHeight","wrapInfo","accumWidth","breakAll","lastIndex","result","exec","matchedIndex","index","pushTokens","substring","pendingList","calculatedHeight","calculatedWidth","stlPadding","truncateLine","finishLine","line","outer","token","tokenStyle","styleName","rich","textPadding","paddingH","tokenHeight","innerHeight","retrieve3","align","verticalAlign","styleTokenWidth","tokenWidthNotSpecified","charAt","percentWidth","push","textBackgroundColor","bgImg","image","imageHelper","findExistImage","isImageReady","remainTruncWidth","parseInt","block","str","isEmptyStr","newLine","strLines","linesWidths","tokenPadding","tokenPaddingH","outerWidth_1","parsePercent","res","isLineHolder","tokensLen","isLatin","ch","code","breakCharMap","reduce","obj","isWordBreakChar","isBreakAll","lastAccumWidth","currentWord","currentWordWidth","chWidth","inWord"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/zrender/lib/graphic/helper/parseText.js"],"sourcesContent":["import * as imageHelper from '../helper/image.js';\nimport { extend, retrieve2, retrieve3, reduce } from '../../core/util.js';\nimport { getLineHeight, getWidth, parsePercent } from '../../contain/text.js';\nvar STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\nexport function truncateText(text, containerWidth, font, ellipsis, options) {\n    if (!containerWidth) {\n        return '';\n    }\n    var textLines = (text + '').split('\\n');\n    options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n    for (var i = 0, len = textLines.length; i < len; i++) {\n        textLines[i] = truncateSingleLine(textLines[i], options);\n    }\n    return textLines.join('\\n');\n}\nfunction prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n    options = options || {};\n    var preparedOpts = extend({}, options);\n    preparedOpts.font = font;\n    ellipsis = retrieve2(ellipsis, '...');\n    preparedOpts.maxIterations = retrieve2(options.maxIterations, 2);\n    var minChar = preparedOpts.minChar = retrieve2(options.minChar, 0);\n    preparedOpts.cnCharWidth = getWidth('å›½', font);\n    var ascCharWidth = preparedOpts.ascCharWidth = getWidth('a', font);\n    preparedOpts.placeholder = retrieve2(options.placeholder, '');\n    var contentWidth = containerWidth = Math.max(0, containerWidth - 1);\n    for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n        contentWidth -= ascCharWidth;\n    }\n    var ellipsisWidth = getWidth(ellipsis, font);\n    if (ellipsisWidth > contentWidth) {\n        ellipsis = '';\n        ellipsisWidth = 0;\n    }\n    contentWidth = containerWidth - ellipsisWidth;\n    preparedOpts.ellipsis = ellipsis;\n    preparedOpts.ellipsisWidth = ellipsisWidth;\n    preparedOpts.contentWidth = contentWidth;\n    preparedOpts.containerWidth = containerWidth;\n    return preparedOpts;\n}\nfunction truncateSingleLine(textLine, options) {\n    var containerWidth = options.containerWidth;\n    var font = options.font;\n    var contentWidth = options.contentWidth;\n    if (!containerWidth) {\n        return '';\n    }\n    var lineWidth = getWidth(textLine, font);\n    if (lineWidth <= containerWidth) {\n        return textLine;\n    }\n    for (var j = 0;; j++) {\n        if (lineWidth <= contentWidth || j >= options.maxIterations) {\n            textLine += options.ellipsis;\n            break;\n        }\n        var subLength = j === 0\n            ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth)\n            : lineWidth > 0\n                ? Math.floor(textLine.length * contentWidth / lineWidth)\n                : 0;\n        textLine = textLine.substr(0, subLength);\n        lineWidth = getWidth(textLine, font);\n    }\n    if (textLine === '') {\n        textLine = options.placeholder;\n    }\n    return textLine;\n}\nfunction estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n    var width = 0;\n    var i = 0;\n    for (var len = text.length; i < len && width < contentWidth; i++) {\n        var charCode = text.charCodeAt(i);\n        width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n    }\n    return i;\n}\nexport function parsePlainText(text, style) {\n    text != null && (text += '');\n    var overflow = style.overflow;\n    var padding = style.padding;\n    var font = style.font;\n    var truncate = overflow === 'truncate';\n    var calculatedLineHeight = getLineHeight(font);\n    var lineHeight = retrieve2(style.lineHeight, calculatedLineHeight);\n    var bgColorDrawn = !!(style.backgroundColor);\n    var truncateLineOverflow = style.lineOverflow === 'truncate';\n    var width = style.width;\n    var lines;\n    if (width != null && (overflow === 'break' || overflow === 'breakAll')) {\n        lines = text ? wrapText(text, style.font, width, overflow === 'breakAll', 0).lines : [];\n    }\n    else {\n        lines = text ? text.split('\\n') : [];\n    }\n    var contentHeight = lines.length * lineHeight;\n    var height = retrieve2(style.height, contentHeight);\n    if (contentHeight > height && truncateLineOverflow) {\n        var lineCount = Math.floor(height / lineHeight);\n        lines = lines.slice(0, lineCount);\n    }\n    if (text && truncate && width != null) {\n        var options = prepareTruncateOptions(width, font, style.ellipsis, {\n            minChar: style.truncateMinChar,\n            placeholder: style.placeholder\n        });\n        for (var i = 0; i < lines.length; i++) {\n            lines[i] = truncateSingleLine(lines[i], options);\n        }\n    }\n    var outerHeight = height;\n    var contentWidth = 0;\n    for (var i = 0; i < lines.length; i++) {\n        contentWidth = Math.max(getWidth(lines[i], font), contentWidth);\n    }\n    if (width == null) {\n        width = contentWidth;\n    }\n    var outerWidth = contentWidth;\n    if (padding) {\n        outerHeight += padding[0] + padding[2];\n        outerWidth += padding[1] + padding[3];\n        width += padding[1] + padding[3];\n    }\n    if (bgColorDrawn) {\n        outerWidth = width;\n    }\n    return {\n        lines: lines,\n        height: height,\n        outerWidth: outerWidth,\n        outerHeight: outerHeight,\n        lineHeight: lineHeight,\n        calculatedLineHeight: calculatedLineHeight,\n        contentWidth: contentWidth,\n        contentHeight: contentHeight,\n        width: width\n    };\n}\nvar RichTextToken = (function () {\n    function RichTextToken() {\n    }\n    return RichTextToken;\n}());\nvar RichTextLine = (function () {\n    function RichTextLine(tokens) {\n        this.tokens = [];\n        if (tokens) {\n            this.tokens = tokens;\n        }\n    }\n    return RichTextLine;\n}());\nvar RichTextContentBlock = (function () {\n    function RichTextContentBlock() {\n        this.width = 0;\n        this.height = 0;\n        this.contentWidth = 0;\n        this.contentHeight = 0;\n        this.outerWidth = 0;\n        this.outerHeight = 0;\n        this.lines = [];\n    }\n    return RichTextContentBlock;\n}());\nexport { RichTextContentBlock };\nexport function parseRichText(text, style) {\n    var contentBlock = new RichTextContentBlock();\n    text != null && (text += '');\n    if (!text) {\n        return contentBlock;\n    }\n    var topWidth = style.width;\n    var topHeight = style.height;\n    var overflow = style.overflow;\n    var wrapInfo = (overflow === 'break' || overflow === 'breakAll') && topWidth != null\n        ? { width: topWidth, accumWidth: 0, breakAll: overflow === 'breakAll' }\n        : null;\n    var lastIndex = STYLE_REG.lastIndex = 0;\n    var result;\n    while ((result = STYLE_REG.exec(text)) != null) {\n        var matchedIndex = result.index;\n        if (matchedIndex > lastIndex) {\n            pushTokens(contentBlock, text.substring(lastIndex, matchedIndex), style, wrapInfo);\n        }\n        pushTokens(contentBlock, result[2], style, wrapInfo, result[1]);\n        lastIndex = STYLE_REG.lastIndex;\n    }\n    if (lastIndex < text.length) {\n        pushTokens(contentBlock, text.substring(lastIndex, text.length), style, wrapInfo);\n    }\n    var pendingList = [];\n    var calculatedHeight = 0;\n    var calculatedWidth = 0;\n    var stlPadding = style.padding;\n    var truncate = overflow === 'truncate';\n    var truncateLine = style.lineOverflow === 'truncate';\n    function finishLine(line, lineWidth, lineHeight) {\n        line.width = lineWidth;\n        line.lineHeight = lineHeight;\n        calculatedHeight += lineHeight;\n        calculatedWidth = Math.max(calculatedWidth, lineWidth);\n    }\n    outer: for (var i = 0; i < contentBlock.lines.length; i++) {\n        var line = contentBlock.lines[i];\n        var lineHeight = 0;\n        var lineWidth = 0;\n        for (var j = 0; j < line.tokens.length; j++) {\n            var token = line.tokens[j];\n            var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n            var textPadding = token.textPadding = tokenStyle.padding;\n            var paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;\n            var font = token.font = tokenStyle.font || style.font;\n            token.contentHeight = getLineHeight(font);\n            var tokenHeight = retrieve2(tokenStyle.height, token.contentHeight);\n            token.innerHeight = tokenHeight;\n            textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n            token.height = tokenHeight;\n            token.lineHeight = retrieve3(tokenStyle.lineHeight, style.lineHeight, tokenHeight);\n            token.align = tokenStyle && tokenStyle.align || style.align;\n            token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || 'middle';\n            if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {\n                if (j > 0) {\n                    line.tokens = line.tokens.slice(0, j);\n                    finishLine(line, lineWidth, lineHeight);\n                    contentBlock.lines = contentBlock.lines.slice(0, i + 1);\n                }\n                else {\n                    contentBlock.lines = contentBlock.lines.slice(0, i);\n                }\n                break outer;\n            }\n            var styleTokenWidth = tokenStyle.width;\n            var tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === 'auto';\n            if (typeof styleTokenWidth === 'string' && styleTokenWidth.charAt(styleTokenWidth.length - 1) === '%') {\n                token.percentWidth = styleTokenWidth;\n                pendingList.push(token);\n                token.contentWidth = getWidth(token.text, font);\n            }\n            else {\n                if (tokenWidthNotSpecified) {\n                    var textBackgroundColor = tokenStyle.backgroundColor;\n                    var bgImg = textBackgroundColor && textBackgroundColor.image;\n                    if (bgImg) {\n                        bgImg = imageHelper.findExistImage(bgImg);\n                        if (imageHelper.isImageReady(bgImg)) {\n                            token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);\n                        }\n                    }\n                }\n                var remainTruncWidth = truncate && topWidth != null\n                    ? topWidth - lineWidth : null;\n                if (remainTruncWidth != null && remainTruncWidth < token.width) {\n                    if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {\n                        token.text = '';\n                        token.width = token.contentWidth = 0;\n                    }\n                    else {\n                        token.text = truncateText(token.text, remainTruncWidth - paddingH, font, style.ellipsis, { minChar: style.truncateMinChar });\n                        token.width = token.contentWidth = getWidth(token.text, font);\n                    }\n                }\n                else {\n                    token.contentWidth = getWidth(token.text, font);\n                }\n            }\n            token.width += paddingH;\n            lineWidth += token.width;\n            tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n        }\n        finishLine(line, lineWidth, lineHeight);\n    }\n    contentBlock.outerWidth = contentBlock.width = retrieve2(topWidth, calculatedWidth);\n    contentBlock.outerHeight = contentBlock.height = retrieve2(topHeight, calculatedHeight);\n    contentBlock.contentHeight = calculatedHeight;\n    contentBlock.contentWidth = calculatedWidth;\n    if (stlPadding) {\n        contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n        contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n    }\n    for (var i = 0; i < pendingList.length; i++) {\n        var token = pendingList[i];\n        var percentWidth = token.percentWidth;\n        token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;\n    }\n    return contentBlock;\n}\nfunction pushTokens(block, str, style, wrapInfo, styleName) {\n    var isEmptyStr = str === '';\n    var tokenStyle = styleName && style.rich[styleName] || {};\n    var lines = block.lines;\n    var font = tokenStyle.font || style.font;\n    var newLine = false;\n    var strLines;\n    var linesWidths;\n    if (wrapInfo) {\n        var tokenPadding = tokenStyle.padding;\n        var tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;\n        if (tokenStyle.width != null && tokenStyle.width !== 'auto') {\n            var outerWidth_1 = parsePercent(tokenStyle.width, wrapInfo.width) + tokenPaddingH;\n            if (lines.length > 0) {\n                if (outerWidth_1 + wrapInfo.accumWidth > wrapInfo.width) {\n                    strLines = str.split('\\n');\n                    newLine = true;\n                }\n            }\n            wrapInfo.accumWidth = outerWidth_1;\n        }\n        else {\n            var res = wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);\n            wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;\n            linesWidths = res.linesWidths;\n            strLines = res.lines;\n        }\n    }\n    else {\n        strLines = str.split('\\n');\n    }\n    for (var i = 0; i < strLines.length; i++) {\n        var text = strLines[i];\n        var token = new RichTextToken();\n        token.styleName = styleName;\n        token.text = text;\n        token.isLineHolder = !text && !isEmptyStr;\n        if (typeof tokenStyle.width === 'number') {\n            token.width = tokenStyle.width;\n        }\n        else {\n            token.width = linesWidths\n                ? linesWidths[i]\n                : getWidth(text, font);\n        }\n        if (!i && !newLine) {\n            var tokens = (lines[lines.length - 1] || (lines[0] = new RichTextLine())).tokens;\n            var tokensLen = tokens.length;\n            (tokensLen === 1 && tokens[0].isLineHolder)\n                ? (tokens[0] = token)\n                : ((text || !tokensLen || isEmptyStr) && tokens.push(token));\n        }\n        else {\n            lines.push(new RichTextLine([token]));\n        }\n    }\n}\nfunction isLatin(ch) {\n    var code = ch.charCodeAt(0);\n    return code >= 0x21 && code <= 0x17F;\n}\nvar breakCharMap = reduce(',&?/;] '.split(''), function (obj, ch) {\n    obj[ch] = true;\n    return obj;\n}, {});\nfunction isWordBreakChar(ch) {\n    if (isLatin(ch)) {\n        if (breakCharMap[ch]) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nfunction wrapText(text, font, lineWidth, isBreakAll, lastAccumWidth) {\n    var lines = [];\n    var linesWidths = [];\n    var line = '';\n    var currentWord = '';\n    var currentWordWidth = 0;\n    var accumWidth = 0;\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\n') {\n            if (currentWord) {\n                line += currentWord;\n                accumWidth += currentWordWidth;\n            }\n            lines.push(line);\n            linesWidths.push(accumWidth);\n            line = '';\n            currentWord = '';\n            currentWordWidth = 0;\n            accumWidth = 0;\n            continue;\n        }\n        var chWidth = getWidth(ch, font);\n        var inWord = isBreakAll ? false : !isWordBreakChar(ch);\n        if (!lines.length\n            ? lastAccumWidth + accumWidth + chWidth > lineWidth\n            : accumWidth + chWidth > lineWidth) {\n            if (!accumWidth) {\n                if (inWord) {\n                    lines.push(currentWord);\n                    linesWidths.push(currentWordWidth);\n                    currentWord = ch;\n                    currentWordWidth = chWidth;\n                }\n                else {\n                    lines.push(ch);\n                    linesWidths.push(chWidth);\n                }\n            }\n            else if (line || currentWord) {\n                if (inWord) {\n                    if (!line) {\n                        line = currentWord;\n                        currentWord = '';\n                        currentWordWidth = 0;\n                        accumWidth = currentWordWidth;\n                    }\n                    lines.push(line);\n                    linesWidths.push(accumWidth - currentWordWidth);\n                    currentWord += ch;\n                    currentWordWidth += chWidth;\n                    line = '';\n                    accumWidth = currentWordWidth;\n                }\n                else {\n                    if (currentWord) {\n                        line += currentWord;\n                        currentWord = '';\n                        currentWordWidth = 0;\n                    }\n                    lines.push(line);\n                    linesWidths.push(accumWidth);\n                    line = ch;\n                    accumWidth = chWidth;\n                }\n            }\n            continue;\n        }\n        accumWidth += chWidth;\n        if (inWord) {\n            currentWord += ch;\n            currentWordWidth += chWidth;\n        }\n        else {\n            if (currentWord) {\n                line += currentWord;\n                currentWord = '';\n                currentWordWidth = 0;\n            }\n            line += ch;\n        }\n    }\n    if (!lines.length && !line) {\n        line = text;\n        currentWord = '';\n        currentWordWidth = 0;\n    }\n    if (currentWord) {\n        line += currentWord;\n    }\n    if (line) {\n        lines.push(line);\n        linesWidths.push(accumWidth);\n    }\n    if (lines.length === 1) {\n        accumWidth += lastAccumWidth;\n    }\n    return {\n        accumWidth: accumWidth,\n        lines: lines,\n        linesWidths: linesWidths\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}