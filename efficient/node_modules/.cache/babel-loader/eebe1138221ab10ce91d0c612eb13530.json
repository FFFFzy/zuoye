{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dataStack;\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\nvar _number = require(\"../util/number.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// (1) [Caution]: the logic is correct based on the premises:\n//     data processing stage is blocked in stream.\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\n// (2) Only register once when import repeatedly.\n//     Should be executed after series is filtered and before stack calculation.\nfunction dataStack(ecModel) {\n  var stackInfoMap = (0, _util.createHashMap)();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack'); // Compatible: when `stack` is set as '', do not stack.\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        // Used for calculate axis extent automatically.\n        // TODO: Type getCalculationInfo return more specific type?\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      }; // If stacked on axis that do not support data stack.\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  (0, _util.each)(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\n    var stackStrategy = targetStackInfo.seriesModel.get('stackStrategy') || 'samesign'; // Should not write on raw data, because stack series model list changes\n    // depending on legend selection.\n\n    targetData.modify(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\n      // should also be NaN, to draw a appropriate belt area.\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      } // If stackOver is NaN, chart view will render point on value start.\n\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\n\n          if (stackStrategy === 'all' // single stack group\n          || stackStrategy === 'positive' && val > 0 || stackStrategy === 'negative' && val < 0 || stackStrategy === 'samesign' && sum >= 0 && val > 0 // All positive stack\n          || stackStrategy === 'samesign' && sum <= 0 && val < 0 // All negative stack\n          ) {\n            // The sum has to be very small to be affected by the\n            // floating arithmetic problem. An incorrect result will probably\n            // cause axis min/max to be filtered incorrectly.\n            sum = (0, _number.addSafe)(sum, val);\n            stackedOver = val;\n            break;\n          }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n  });\n}","map":{"version":3,"names":["dataStack","ecModel","stackInfoMap","createHashMap","eachSeries","seriesModel","stack","get","stackInfoList","set","data","getData","stackInfo","stackResultDimension","getCalculationInfo","stackedOverDimension","stackedDimension","stackedByDimension","isStackedByIndex","length","setCalculationInfo","push","each","calculateStack","targetStackInfo","idxInStack","resultVal","resultNaN","NaN","dims","targetData","stackStrategy","modify","v0","v1","dataIndex","sum","isNaN","byValue","stackedDataRawIndex","getRawIndex","stackedOver","j","rawIndexOf","val","getByRawIndex","addSafe"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/processor/dataStack.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util.js';\nimport { addSafe } from '../util/number.js'; // (1) [Caution]: the logic is correct based on the premises:\n//     data processing stage is blocked in stream.\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\n// (2) Only register once when import repeatedly.\n//     Should be executed after series is filtered and before stack calculation.\n\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack'); // Compatible: when `stack` is set as '', do not stack.\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        // Used for calculate axis extent automatically.\n        // TODO: Type getCalculationInfo return more specific type?\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      }; // If stacked on axis that do not support data stack.\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\n    var stackStrategy = targetStackInfo.seriesModel.get('stackStrategy') || 'samesign'; // Should not write on raw data, because stack series model list changes\n    // depending on legend selection.\n\n    targetData.modify(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\n      // should also be NaN, to draw a appropriate belt area.\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      } // If stackOver is NaN, chart view will render point on value start.\n\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\n\n          if (stackStrategy === 'all' // single stack group\n          || stackStrategy === 'positive' && val > 0 || stackStrategy === 'negative' && val < 0 || stackStrategy === 'samesign' && sum >= 0 && val > 0 // All positive stack\n          || stackStrategy === 'samesign' && sum <= 0 && val < 0 // All negative stack\n          ) {\n              // The sum has to be very small to be affected by the\n              // floating arithmetic problem. An incorrect result will probably\n              // cause axis min/max to be filtered incorrectly.\n              sum = addSafe(sum, val);\n              stackedOver = val;\n              break;\n            }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}