{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Region = exports.GeoSVGRegion = exports.GeoJSONRegion = exports.GeoJSONPolygonGeometry = exports.GeoJSONLineStringGeometry = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _BoundingRect = _interopRequireDefault(require(\"zrender/lib/core/BoundingRect.js\"));\n\nvar vec2 = _interopRequireWildcard(require(\"zrender/lib/core/vector.js\"));\n\nvar polygonContain = _interopRequireWildcard(require(\"zrender/lib/contain/polygon.js\"));\n\nvar matrix = _interopRequireWildcard(require(\"zrender/lib/core/matrix.js\"));\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar TMP_TRANSFORM = [];\n\nfunction transformPoints(points, transform) {\n  for (var p = 0; p < points.length; p++) {\n    vec2.applyTransform(points[p], points[p], transform);\n  }\n}\n\nfunction updateBBoxFromPoints(points, min, max, projection) {\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n\n    if (projection) {\n      // projection may return null point.\n      p = projection.project(p);\n    }\n\n    if (p && isFinite(p[0]) && isFinite(p[1])) {\n      vec2.min(min, min, p);\n      vec2.max(max, max, p);\n    }\n  }\n}\n\nfunction centroid(points) {\n  var signedArea = 0;\n  var cx = 0;\n  var cy = 0;\n  var len = points.length;\n  var x0 = points[len - 1][0];\n  var y0 = points[len - 1][1]; // Polygon should been closed.\n\n  for (var i = 0; i < len; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var a = x0 * y1 - x1 * y0;\n    signedArea += a;\n    cx += (x0 + x1) * a;\n    cy += (y0 + y1) * a;\n    x0 = x1;\n    y0 = y1;\n  }\n\n  return signedArea ? [cx / signedArea / 3, cy / signedArea / 3, signedArea] : [points[0][0] || 0, points[0][1] || 0];\n}\n\nvar Region =\n/** @class */\nfunction () {\n  function Region(name) {\n    this.name = name;\n  }\n\n  Region.prototype.setCenter = function (center) {\n    this._center = center;\n  };\n  /**\n   * Get center point in data unit. That is,\n   * for GeoJSONRegion, the unit is lat/lng,\n   * for GeoSVGRegion, the unit is SVG local coord.\n   */\n\n\n  Region.prototype.getCenter = function () {\n    var center = this._center;\n\n    if (!center) {\n      // In most cases there are no need to calculate this center.\n      // So calculate only when called.\n      center = this._center = this.calcCenter();\n    }\n\n    return center;\n  };\n\n  return Region;\n}();\n\nexports.Region = Region;\n\nvar GeoJSONPolygonGeometry =\n/** @class */\nfunction () {\n  function GeoJSONPolygonGeometry(exterior, interiors) {\n    this.type = 'polygon';\n    this.exterior = exterior;\n    this.interiors = interiors;\n  }\n\n  return GeoJSONPolygonGeometry;\n}();\n\nexports.GeoJSONPolygonGeometry = GeoJSONPolygonGeometry;\n\nvar GeoJSONLineStringGeometry =\n/** @class */\nfunction () {\n  function GeoJSONLineStringGeometry(points) {\n    this.type = 'linestring';\n    this.points = points;\n  }\n\n  return GeoJSONLineStringGeometry;\n}();\n\nexports.GeoJSONLineStringGeometry = GeoJSONLineStringGeometry;\n\nvar GeoJSONRegion =\n/** @class */\nfunction (_super) {\n  (0, _tslib.__extends)(GeoJSONRegion, _super);\n\n  function GeoJSONRegion(name, geometries, cp) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoJSON';\n    _this.geometries = geometries;\n    _this._center = cp && [cp[0], cp[1]];\n    return _this;\n  }\n\n  GeoJSONRegion.prototype.calcCenter = function () {\n    var geometries = this.geometries;\n    var largestGeo;\n    var largestGeoSize = 0;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n      var exterior = geo.exterior; // Simple trick to use points count instead of polygon area as region size.\n      // Ignore linestring\n\n      var size = exterior && exterior.length;\n\n      if (size > largestGeoSize) {\n        largestGeo = geo;\n        largestGeoSize = size;\n      }\n    }\n\n    if (largestGeo) {\n      return centroid(largestGeo.exterior);\n    } // from bounding rect by default.\n\n\n    var rect = this.getBoundingRect();\n    return [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.getBoundingRect = function (projection) {\n    var rect = this._rect; // Always recalculate if using projection.\n\n    if (rect && !projection) {\n      return rect;\n    }\n\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    var geometries = this.geometries;\n    (0, _util.each)(geometries, function (geo) {\n      if (geo.type === 'polygon') {\n        // Doesn't consider hole\n        updateBBoxFromPoints(geo.exterior, min, max, projection);\n      } else {\n        (0, _util.each)(geo.points, function (points) {\n          updateBBoxFromPoints(points, min, max, projection);\n        });\n      }\n    }); // Normalie invalid bounding.\n\n    if (!(isFinite(min[0]) && isFinite(min[1]) && isFinite(max[0]) && isFinite(max[1]))) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    rect = new _BoundingRect.default(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\n    if (!projection) {\n      this._rect = rect;\n    }\n\n    return rect;\n  };\n\n  GeoJSONRegion.prototype.contain = function (coord) {\n    var rect = this.getBoundingRect();\n    var geometries = this.geometries;\n\n    if (!rect.contain(coord[0], coord[1])) {\n      return false;\n    }\n\n    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {\n      var geo = geometries[i]; // Only support polygon.\n\n      if (geo.type !== 'polygon') {\n        continue;\n      }\n\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n\n      if (polygonContain.contain(exterior, coord[0], coord[1])) {\n        // Not in the region if point is in the hole.\n        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {\n          if (polygonContain.contain(interiors[k], coord[0], coord[1])) {\n            continue loopGeo;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Transform the raw coords to target bounding.\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n\n\n  GeoJSONRegion.prototype.transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var aspect = rect.width / rect.height;\n\n    if (!width) {\n      width = aspect * height;\n    } else if (!height) {\n      height = width / aspect;\n    }\n\n    var target = new _BoundingRect.default(x, y, width, height);\n    var transform = rect.calculateTransform(target);\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n\n      if (geo.type === 'polygon') {\n        transformPoints(geo.exterior, transform);\n        (0, _util.each)(geo.interiors, function (interior) {\n          transformPoints(interior, transform);\n        });\n      } else {\n        (0, _util.each)(geo.points, function (points) {\n          transformPoints(points, transform);\n        });\n      }\n    }\n\n    rect = this._rect;\n    rect.copy(target); // Update center\n\n    this._center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.cloneShallow = function (name) {\n    name == null && (name = this.name);\n    var newRegion = new GeoJSONRegion(name, this.geometries, this._center);\n    newRegion._rect = this._rect;\n    newRegion.transformTo = null; // Simply avoid to be called.\n\n    return newRegion;\n  };\n\n  return GeoJSONRegion;\n}(Region);\n\nexports.GeoJSONRegion = GeoJSONRegion;\n\nvar GeoSVGRegion =\n/** @class */\nfunction (_super) {\n  (0, _tslib.__extends)(GeoSVGRegion, _super);\n\n  function GeoSVGRegion(name, elOnlyForCalculate) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoSVG';\n    _this._elOnlyForCalculate = elOnlyForCalculate;\n    return _this;\n  }\n\n  GeoSVGRegion.prototype.calcCenter = function () {\n    var el = this._elOnlyForCalculate;\n    var rect = el.getBoundingRect();\n    var center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    var mat = matrix.identity(TMP_TRANSFORM);\n    var target = el;\n\n    while (target && !target.isGeoSVGGraphicRoot) {\n      matrix.mul(mat, target.getLocalTransform(), mat);\n      target = target.parent;\n    }\n\n    matrix.invert(mat, mat);\n    vec2.applyTransform(center, center, mat);\n    return center;\n  };\n\n  return GeoSVGRegion;\n}(Region);\n\nexports.GeoSVGRegion = GeoSVGRegion;","map":{"version":3,"names":["TMP_TRANSFORM","transformPoints","points","transform","p","length","vec2","applyTransform","updateBBoxFromPoints","min","max","projection","i","project","isFinite","centroid","signedArea","cx","cy","len","x0","y0","x1","y1","a","Region","name","prototype","setCenter","center","_center","getCenter","calcCenter","GeoJSONPolygonGeometry","exterior","interiors","type","GeoJSONLineStringGeometry","GeoJSONRegion","_super","__extends","geometries","cp","_this","call","largestGeo","largestGeoSize","geo","size","rect","getBoundingRect","x","width","y","height","_rect","Infinity","each","BoundingRect","contain","coord","loopGeo","polygonContain","k","transformTo","aspect","target","calculateTransform","interior","copy","cloneShallow","newRegion","GeoSVGRegion","elOnlyForCalculate","_elOnlyForCalculate","el","mat","matrix","identity","isGeoSVGGraphicRoot","mul","getLocalTransform","parent","invert"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/coord/geo/Region.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport * as vec2 from 'zrender/lib/core/vector.js';\nimport * as polygonContain from 'zrender/lib/contain/polygon.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport { each } from 'zrender/lib/core/util.js';\nvar TMP_TRANSFORM = [];\n\nfunction transformPoints(points, transform) {\n  for (var p = 0; p < points.length; p++) {\n    vec2.applyTransform(points[p], points[p], transform);\n  }\n}\n\nfunction updateBBoxFromPoints(points, min, max, projection) {\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n\n    if (projection) {\n      // projection may return null point.\n      p = projection.project(p);\n    }\n\n    if (p && isFinite(p[0]) && isFinite(p[1])) {\n      vec2.min(min, min, p);\n      vec2.max(max, max, p);\n    }\n  }\n}\n\nfunction centroid(points) {\n  var signedArea = 0;\n  var cx = 0;\n  var cy = 0;\n  var len = points.length;\n  var x0 = points[len - 1][0];\n  var y0 = points[len - 1][1]; // Polygon should been closed.\n\n  for (var i = 0; i < len; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var a = x0 * y1 - x1 * y0;\n    signedArea += a;\n    cx += (x0 + x1) * a;\n    cy += (y0 + y1) * a;\n    x0 = x1;\n    y0 = y1;\n  }\n\n  return signedArea ? [cx / signedArea / 3, cy / signedArea / 3, signedArea] : [points[0][0] || 0, points[0][1] || 0];\n}\n\nvar Region =\n/** @class */\nfunction () {\n  function Region(name) {\n    this.name = name;\n  }\n\n  Region.prototype.setCenter = function (center) {\n    this._center = center;\n  };\n  /**\n   * Get center point in data unit. That is,\n   * for GeoJSONRegion, the unit is lat/lng,\n   * for GeoSVGRegion, the unit is SVG local coord.\n   */\n\n\n  Region.prototype.getCenter = function () {\n    var center = this._center;\n\n    if (!center) {\n      // In most cases there are no need to calculate this center.\n      // So calculate only when called.\n      center = this._center = this.calcCenter();\n    }\n\n    return center;\n  };\n\n  return Region;\n}();\n\nexport { Region };\n\nvar GeoJSONPolygonGeometry =\n/** @class */\nfunction () {\n  function GeoJSONPolygonGeometry(exterior, interiors) {\n    this.type = 'polygon';\n    this.exterior = exterior;\n    this.interiors = interiors;\n  }\n\n  return GeoJSONPolygonGeometry;\n}();\n\nexport { GeoJSONPolygonGeometry };\n\nvar GeoJSONLineStringGeometry =\n/** @class */\nfunction () {\n  function GeoJSONLineStringGeometry(points) {\n    this.type = 'linestring';\n    this.points = points;\n  }\n\n  return GeoJSONLineStringGeometry;\n}();\n\nexport { GeoJSONLineStringGeometry };\n\nvar GeoJSONRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSONRegion, _super);\n\n  function GeoJSONRegion(name, geometries, cp) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoJSON';\n    _this.geometries = geometries;\n    _this._center = cp && [cp[0], cp[1]];\n    return _this;\n  }\n\n  GeoJSONRegion.prototype.calcCenter = function () {\n    var geometries = this.geometries;\n    var largestGeo;\n    var largestGeoSize = 0;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n      var exterior = geo.exterior; // Simple trick to use points count instead of polygon area as region size.\n      // Ignore linestring\n\n      var size = exterior && exterior.length;\n\n      if (size > largestGeoSize) {\n        largestGeo = geo;\n        largestGeoSize = size;\n      }\n    }\n\n    if (largestGeo) {\n      return centroid(largestGeo.exterior);\n    } // from bounding rect by default.\n\n\n    var rect = this.getBoundingRect();\n    return [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.getBoundingRect = function (projection) {\n    var rect = this._rect; // Always recalculate if using projection.\n\n    if (rect && !projection) {\n      return rect;\n    }\n\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    var geometries = this.geometries;\n    each(geometries, function (geo) {\n      if (geo.type === 'polygon') {\n        // Doesn't consider hole\n        updateBBoxFromPoints(geo.exterior, min, max, projection);\n      } else {\n        each(geo.points, function (points) {\n          updateBBoxFromPoints(points, min, max, projection);\n        });\n      }\n    }); // Normalie invalid bounding.\n\n    if (!(isFinite(min[0]) && isFinite(min[1]) && isFinite(max[0]) && isFinite(max[1]))) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\n    if (!projection) {\n      this._rect = rect;\n    }\n\n    return rect;\n  };\n\n  GeoJSONRegion.prototype.contain = function (coord) {\n    var rect = this.getBoundingRect();\n    var geometries = this.geometries;\n\n    if (!rect.contain(coord[0], coord[1])) {\n      return false;\n    }\n\n    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {\n      var geo = geometries[i]; // Only support polygon.\n\n      if (geo.type !== 'polygon') {\n        continue;\n      }\n\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n\n      if (polygonContain.contain(exterior, coord[0], coord[1])) {\n        // Not in the region if point is in the hole.\n        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {\n          if (polygonContain.contain(interiors[k], coord[0], coord[1])) {\n            continue loopGeo;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Transform the raw coords to target bounding.\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n\n\n  GeoJSONRegion.prototype.transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var aspect = rect.width / rect.height;\n\n    if (!width) {\n      width = aspect * height;\n    } else if (!height) {\n      height = width / aspect;\n    }\n\n    var target = new BoundingRect(x, y, width, height);\n    var transform = rect.calculateTransform(target);\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n\n      if (geo.type === 'polygon') {\n        transformPoints(geo.exterior, transform);\n        each(geo.interiors, function (interior) {\n          transformPoints(interior, transform);\n        });\n      } else {\n        each(geo.points, function (points) {\n          transformPoints(points, transform);\n        });\n      }\n    }\n\n    rect = this._rect;\n    rect.copy(target); // Update center\n\n    this._center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.cloneShallow = function (name) {\n    name == null && (name = this.name);\n    var newRegion = new GeoJSONRegion(name, this.geometries, this._center);\n    newRegion._rect = this._rect;\n    newRegion.transformTo = null; // Simply avoid to be called.\n\n    return newRegion;\n  };\n\n  return GeoJSONRegion;\n}(Region);\n\nexport { GeoJSONRegion };\n\nvar GeoSVGRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoSVGRegion, _super);\n\n  function GeoSVGRegion(name, elOnlyForCalculate) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoSVG';\n    _this._elOnlyForCalculate = elOnlyForCalculate;\n    return _this;\n  }\n\n  GeoSVGRegion.prototype.calcCenter = function () {\n    var el = this._elOnlyForCalculate;\n    var rect = el.getBoundingRect();\n    var center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    var mat = matrix.identity(TMP_TRANSFORM);\n    var target = el;\n\n    while (target && !target.isGeoSVGGraphicRoot) {\n      matrix.mul(mat, target.getLocalTransform(), mat);\n      target = target.parent;\n    }\n\n    matrix.invert(mat, mat);\n    vec2.applyTransform(center, center, mat);\n    return center;\n  };\n\n  return GeoSVGRegion;\n}(Region);\n\nexport { GeoSVGRegion };"],"mappings":"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"},"metadata":{},"sourceType":"script"}