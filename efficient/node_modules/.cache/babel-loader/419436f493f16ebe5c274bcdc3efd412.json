{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.seriesStyleTask = exports.dataStyleTask = exports.dataColorPaletteTask = void 0;\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\nvar _makeStyleMapper = _interopRequireDefault(require(\"../model/mixin/makeStyleMapper.js\"));\n\nvar _itemStyle = require(\"../model/mixin/itemStyle.js\");\n\nvar _lineStyle = require(\"../model/mixin/lineStyle.js\");\n\nvar _Model = _interopRequireDefault(require(\"../model/Model.js\"));\n\nvar _model = require(\"../util/model.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = (0, _model.makeInner)();\nvar defaultStyleMappers = {\n  itemStyle: (0, _makeStyleMapper.default)(_itemStyle.ITEM_STYLE_KEY_MAP, true),\n  lineStyle: (0, _makeStyleMapper.default)(_lineStyle.LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = (0, _util.isFunction)(color) ? color : null;\n    var hasAutoColor = globalStyle.fill === 'auto' || globalStyle.stroke === 'auto'; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback || hasAutoColor) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      var colorPalette = seriesModel.getColorFromPalette( // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n\n      if (!globalStyle[colorKey]) {\n        globalStyle[colorKey] = colorPalette;\n        data.setVisual('colorFromPalette', true);\n      }\n\n      globalStyle.fill = globalStyle.fill === 'auto' || (0, _util.isFunction)(globalStyle.fill) ? colorPalette : globalStyle.fill;\n      globalStyle.stroke = globalStyle.stroke === 'auto' || (0, _util.isFunction)(globalStyle.stroke) ? colorPalette : globalStyle.stroke;\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = (0, _util.extend)({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nexports.seriesStyleTask = seriesStyleTask;\nvar sharedModel = new _Model.default();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          (0, _util.extend)(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nexports.dataStyleTask = dataStyleTask;\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = (0, _util.createHashMap)();\n    ecModel.eachSeries(function (seriesModel) {\n      var colorBy = seriesModel.getColorBy();\n\n      if (seriesModel.isColorBySeries()) {\n        return;\n      }\n\n      var key = seriesModel.type + '-' + colorBy;\n      var colorScope = paletteScopeGroupByType.get(key);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(key, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.isColorBySeries() || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexports.dataColorPaletteTask = dataColorPaletteTask;","map":{"version":3,"names":["inner","makeInner","defaultStyleMappers","itemStyle","makeStyleMapper","ITEM_STYLE_KEY_MAP","lineStyle","LINE_STYLE_KEY_MAP","defaultColorKey","getStyleMapper","seriesModel","stylePath","styleMapper","visualStyleMapper","console","warn","getDefaultColorKey","colorKey","visualDrawType","seriesStyleTask","createOnAllSeries","performRawSeries","reset","ecModel","data","getData","visualStyleAccessPath","styleModel","getModel","getStyle","globalStyle","decalOption","getShallow","setVisual","dirty","color","colorCallback","isFunction","hasAutoColor","fill","stroke","colorPalette","getColorFromPalette","name","getSeriesCount","isSeriesFiltered","dataEach","idx","dataParams","getDataParams","extend","setItemVisual","sharedModel","Model","dataStyleTask","ignoreStyleOnData","getVisual","hasItemOption","rawItem","getRawDataItem","option","style","existsStyle","ensureUniqueItemVisual","decal","dataColorPaletteTask","overallReset","paletteScopeGroupByType","createHashMap","eachSeries","colorBy","getColorBy","isColorBySeries","key","type","colorScope","get","set","scope","dataAll","getRawData","idxMap","each","rawIdx","getRawIndex","fromPalette","getItemVisual","name_1","getName","dataCount","count"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/visual/style.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isFunction, extend, createHashMap } from 'zrender/lib/core/util.js';\nimport makeStyleMapper from '../model/mixin/makeStyleMapper.js';\nimport { ITEM_STYLE_KEY_MAP } from '../model/mixin/itemStyle.js';\nimport { LINE_STYLE_KEY_MAP } from '../model/mixin/lineStyle.js';\nimport Model from '../model/Model.js';\nimport { makeInner } from '../util/model.js';\nvar inner = makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper(ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper(LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = isFunction(color) ? color : null;\n    var hasAutoColor = globalStyle.fill === 'auto' || globalStyle.stroke === 'auto'; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback || hasAutoColor) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      var colorPalette = seriesModel.getColorFromPalette( // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n\n      if (!globalStyle[colorKey]) {\n        globalStyle[colorKey] = colorPalette;\n        data.setVisual('colorFromPalette', true);\n      }\n\n      globalStyle.fill = globalStyle.fill === 'auto' || isFunction(globalStyle.fill) ? colorPalette : globalStyle.fill;\n      globalStyle.stroke = globalStyle.stroke === 'auto' || isFunction(globalStyle.stroke) ? colorPalette : globalStyle.stroke;\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nvar sharedModel = new Model();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var colorBy = seriesModel.getColorBy();\n\n      if (seriesModel.isColorBySeries()) {\n        return;\n      }\n\n      var key = seriesModel.type + '-' + colorBy;\n      var colorScope = paletteScopeGroupByType.get(key);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(key, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.isColorBySeries() || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexport { seriesStyleTask, dataStyleTask, dataColorPaletteTask };"],"mappings":"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"},"metadata":{},"sourceType":"script"}