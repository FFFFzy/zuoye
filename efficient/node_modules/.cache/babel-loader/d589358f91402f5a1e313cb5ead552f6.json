{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = axisTrigger;\n\nvar _model = require(\"../../util/model.js\");\n\nvar modelHelper = _interopRequireWildcard(require(\"./modelHelper.js\"));\n\nvar _findPointFromSeries = _interopRequireDefault(require(\"./findPointFromSeries.js\"));\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = (0, _model.makeInner)();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @return content of event obj for echarts.connect.\n */\n\nfunction axisTrigger(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || (0, _util.bind)(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = (0, _findPointFromSeries.default)({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputPayload = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: (0, _util.curry)(showPointer, showValueMap),\n    showTooltip: (0, _util.curry)(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  (0, _util.each)(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    (0, _util.each)(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputPayload);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  (0, _util.each)(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      (0, _util.each)(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  (0, _util.each)(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputPayload);\n  });\n  updateModelActually(showValueMap, axesInfo, outputPayload);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputPayload;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, noSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By default use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    (0, _util.extend)(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!noSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  (0, _util.each)(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.getData().mapDimensionsAll(dim);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      // false,\n      axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      (0, _util.each)(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get(['label', 'precision']),\n      formatter: axisPointerModel.get(['label', 'formatter'])\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputPayload) {\n  var outputAxesInfo = outputPayload.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  (0, _util.each)(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n      // If hide, value still need to be set, consider\n      // click legend to toggle axis blank.\n      !axisInfo.useHandle && (option.status = 'hide');\n    } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = inner(zr)[highDownKey] || {};\n  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  (0, _util.each)(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && (0, _util.each)(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  (0, _util.each)(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  (0, _util.each)(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    // Not blur others when highlight in axisPointer.\n    notBlur: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    // Not blur others when highlight in axisPointer.\n    notBlur: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}","map":{"version":3,"names":["inner","makeInner","axisTrigger","payload","ecModel","api","currTrigger","point","x","y","finder","dispatchAction","bind","coordSysAxesInfo","getComponent","illegalPoint","findPointFromSeries","seriesIndex","dataIndex","isIllegalPoint","inputAxesInfo","axesInfo","shouldHide","outputPayload","showValueMap","dataByCoordSys","list","map","updaters","showPointer","curry","showTooltip","each","coordSysMap","coordSys","coordSysKey","coordSysContainsPoint","containPoint","axisInfo","key","axis","inputAxisInfo","findInputAxisInfo","val","value","pointToData","processOnAxis","linkTriggers","tarAxisInfo","tarKey","linkGroup","srcAxisInfo","srcKey","srcValItem","mapper","scale","parse","makeMapperParam","updateModelActually","dispatchTooltipActually","dispatchHighDownActually","newValue","noSnap","outputFinder","isBlank","containData","involveSeries","payloadInfo","buildPayloadsBySeries","payloadBatch","snapToValue","extend","snap","dim","minDist","Number","MAX_VALUE","minDiff","seriesModels","series","idx","dataDim","getData","mapDimensionsAll","seriesNestestValue","dataIndices","getAxisTooltipData","result","nestestValue","indicesOfNearest","type","length","get","isFinite","diff","dist","Math","abs","push","dataIndexInside","getRawIndex","axisModel","model","axisPointerModel","triggerTooltip","coordSysModel","modelHelper","makeKey","coordSysItem","coordSysId","id","coordSysIndex","componentIndex","coordSysType","coordSysMainType","mainType","dataByAxis","axisDim","axisIndex","axisType","axisId","valueLabelOpt","precision","formatter","seriesDataIndices","slice","outputAxesInfo","option","valItem","useHandle","status","sampleItem","escapeConnect","tooltipOption","position","zr","getZr","highDownKey","lastHighlights","newHighlights","batchItem","toHighlight","toDownplay","notBlur","batch","i","item","axisName","name","isNaN"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/component/axisPointer/axisTrigger.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { makeInner } from '../../util/model.js';\nimport * as modelHelper from './modelHelper.js';\nimport findPointFromSeries from './findPointFromSeries.js';\nimport { each, curry, bind, extend } from 'zrender/lib/core/util.js';\nvar inner = makeInner();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @return content of event obj for echarts.connect.\n */\n\nexport default function axisTrigger(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || bind(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = findPointFromSeries({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputPayload = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: curry(showPointer, showValueMap),\n    showTooltip: curry(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputPayload);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  each(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  each(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputPayload);\n  });\n  updateModelActually(showValueMap, axesInfo, outputPayload);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputPayload;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, noSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By default use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    extend(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!noSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  each(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.getData().mapDimensionsAll(dim);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      // false,\n      axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      each(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get(['label', 'precision']),\n      formatter: axisPointerModel.get(['label', 'formatter'])\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputPayload) {\n  var outputAxesInfo = outputPayload.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n        // If hide, value still need to be set, consider\n        // click legend to toggle axis blank.\n        !axisInfo.useHandle && (option.status = 'hide');\n      } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = inner(zr)[highDownKey] || {};\n  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  each(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  each(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    // Not blur others when highlight in axisPointer.\n    notBlur: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    // Not blur others when highlight in axisPointer.\n    notBlur: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}