{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TooltipMarkupStyleCreator = void 0;\nexports.buildTooltipMarkup = buildTooltipMarkup;\nexports.createTooltipMarkup = createTooltipMarkup;\nexports.getPaddingFromTooltipModel = getPaddingFromTooltipModel;\nexports.retrieveVisualColorForTooltipMarker = retrieveVisualColorForTooltipMarker;\n\nvar _format = require(\"../../util/format.js\");\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\nvar _dataValueHelper = require(\"../../data/helper/dataValueHelper.js\");\n\nvar _number = require(\"../../util/number.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + (0, _format.encodeHTML)(nameFontSize + '') + \"px;color:\" + (0, _format.encodeHTML)(nameFontColor) + \";font-weight:\" + (0, _format.encodeHTML)(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + (0, _format.encodeHTML)(valueFontSize + '') + \"px;color:\" + (0, _format.encodeHTML)(valueFontColor) + \";font-weight:\" + (0, _format.encodeHTML)(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nfunction createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction isSectionFragment(frag) {\n  return frag.type === 'section';\n}\n\nfunction getBuilder(frag) {\n  return isSectionFragment(frag) ? buildSection : buildNameValue;\n}\n\nfunction getBlockGapLevel(frag) {\n  if (isSectionFragment(frag)) {\n    var gapLevel_1 = 0;\n    var subBlockLen = frag.blocks.length;\n    var hasInnerGap_1 = subBlockLen > 1 || subBlockLen > 0 && !frag.noHeader;\n    (0, _util.each)(frag.blocks, function (subBlock) {\n      var subGapLevel = getBlockGapLevel(subBlock); // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n      // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n      if (subGapLevel >= gapLevel_1) {\n        gapLevel_1 = subGapLevel + +(hasInnerGap_1 && ( // 0 always can not be readable gap level.\n        !subGapLevel // If no header, always keep the sub gap level. Otherwise\n        // look weird in case `multipleSeries`.\n        || isSectionFragment(subBlock) && !subBlock.noHeader));\n      }\n    });\n    return gapLevel_1;\n  }\n\n  return 0;\n}\n\nfunction buildSection(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var noHeader = fragment.noHeader;\n  var gaps = getGap(getBlockGapLevel(fragment));\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  (0, _util.assert)(!subBlocks || (0, _util.isArray)(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if ((0, _util.hasOwn)(orderMap, orderMode)) {\n      var comparator_1 = new _dataValueHelper.SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n      subBlocks.reverse();\n    }\n  }\n\n  (0, _util.each)(subBlocks, function (subBlock, idx) {\n    var valueFormatter = fragment.valueFormatter;\n    var subMarkupText = getBuilder(subBlock)( // Inherit valueFormatter\n    valueFormatter ? (0, _util.extend)((0, _util.extend)({}, ctx), {\n      valueFormatter: valueFormatter\n    }) : ctx, subBlock, idx > 0 ? gaps.html : 0, toolTipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n  var subMarkupText = ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), noHeader ? topMarginForOuterGap : gaps.html);\n\n  if (noHeader) {\n    return subMarkupText;\n  }\n\n  var displayableHeader = (0, _format.makeValueReadable)(fragment.header, 'ordinal', ctx.useUTC);\n  var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n  if (ctx.renderMode === 'richText') {\n    return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n  } else {\n    return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + (0, _format.encodeHTML)(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n  }\n}\n\nfunction buildNameValue(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var renderMode = ctx.renderMode;\n  var noName = fragment.noName;\n  var noValue = fragment.noValue;\n  var noMarker = !fragment.markerType;\n  var name = fragment.name;\n  var useUTC = ctx.useUTC;\n\n  var valueFormatter = fragment.valueFormatter || ctx.valueFormatter || function (value) {\n    value = (0, _util.isArray)(value) ? value : [value];\n    return (0, _util.map)(value, function (val, idx) {\n      return (0, _format.makeValueReadable)(val, (0, _util.isArray)(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n    });\n  };\n\n  if (noName && noValue) {\n    return;\n  }\n\n  var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n  var readableName = noName ? '' : (0, _format.makeValueReadable)(name, 'ordinal', useUTC);\n  var valueTypeOption = fragment.valueType;\n  var readableValueList = noValue ? [] : valueFormatter(fragment.value);\n  var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n  var valueCloseToMarker = !noMarker && noName;\n\n  var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n      nameStyle = _a.nameStyle,\n      valueStyle = _a.valueStyle;\n\n  return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n  + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nfunction buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator,\n    valueFormatter: fragment.valueFormatter\n  };\n  return builder(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(gapLevel) {\n  return {\n    html: HTML_GAPS[gapLevel],\n    richText: RICH_TEXT_GAPS[gapLevel]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + (0, _format.encodeHTML)(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  valueList = (0, _util.isArray)(valueList) ? valueList : [valueList];\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + (0, _util.map)(valueList, function (value) {\n    return (0, _format.encodeHTML)(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, values, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle((0, _util.isArray)(values) ? values.join('  ') : values, styles);\n}\n\nfunction retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return (0, _format.convertToColorString)(color);\n}\n\nfunction getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = (0, _number.getRandomIdBase)();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = (0, _format.getTooltipMarker)({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if ((0, _util.isString)(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _util.assert)(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if ((0, _util.isArray)(styles)) {\n      (0, _util.each)(styles, function (stl) {\n        return (0, _util.extend)(finalStl, stl);\n      });\n    } else {\n      (0, _util.extend)(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexports.TooltipMarkupStyleCreator = TooltipMarkupStyleCreator;","map":{"version":3,"names":["TOOLTIP_LINE_HEIGHT_CSS","getTooltipTextStyle","textStyle","renderMode","nameFontColor","color","nameFontSize","fontSize","nameFontWeight","fontWeight","valueFontColor","valueFontSize","valueFontWeight","nameStyle","encodeHTML","valueStyle","fill","HTML_GAPS","RICH_TEXT_GAPS","createTooltipMarkup","type","option","isSectionFragment","frag","getBuilder","buildSection","buildNameValue","getBlockGapLevel","gapLevel_1","subBlockLen","blocks","length","hasInnerGap_1","noHeader","each","subBlock","subGapLevel","ctx","fragment","topMarginForOuterGap","toolTipTextStyle","gaps","getGap","subMarkupTextList","subBlocks","assert","isArray","orderMode","sortBlocks","slice","orderMap","valueAsc","valueDesc","hasOwn","comparator_1","SortOrderComparator","sort","a","b","evaluate","sortParam","reverse","idx","valueFormatter","subMarkupText","extend","html","push","join","richText","wrapBlockHTML","displayableHeader","makeValueReadable","header","useUTC","wrapInlineNameRichText","noName","noValue","noMarker","markerType","name","value","map","val","valueTypeOption","markerStr","markupStyleCreator","makeTooltipMarker","markerColor","readableName","valueType","readableValueList","valueAlignRight","valueCloseToMarker","_a","wrapInlineValueRichText","wrapInlineNameHTML","wrapInlineValueHTML","buildTooltipMarkup","builder","gapLevel","encodedContent","topGap","clearfix","marginCSS","leftHasMarker","style","marginCss","valueList","alignRight","paddingStr","alignCSS","wrapRichTextStyle","values","styles","paddingLeft","padding","align","retrieveVisualColorForTooltipMarker","series","dataIndex","getData","getItemVisual","visualDrawType","convertToColorString","getPaddingFromTooltipModel","model","get","TooltipMarkupStyleCreator","richTextStyles","_nextStyleNameId","getRandomIdBase","prototype","_generateStyleName","colorStr","markerId","marker","getTooltipMarker","isString","process","env","NODE_ENV","content","text","finalStl","stl","styleName"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/component/tooltip/tooltipMarkup.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format.js';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util.js';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper.js';\nimport { getRandomIdBase } from '../../util/number.js';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction isSectionFragment(frag) {\n  return frag.type === 'section';\n}\n\nfunction getBuilder(frag) {\n  return isSectionFragment(frag) ? buildSection : buildNameValue;\n}\n\nfunction getBlockGapLevel(frag) {\n  if (isSectionFragment(frag)) {\n    var gapLevel_1 = 0;\n    var subBlockLen = frag.blocks.length;\n    var hasInnerGap_1 = subBlockLen > 1 || subBlockLen > 0 && !frag.noHeader;\n    each(frag.blocks, function (subBlock) {\n      var subGapLevel = getBlockGapLevel(subBlock); // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n      // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n      if (subGapLevel >= gapLevel_1) {\n        gapLevel_1 = subGapLevel + +(hasInnerGap_1 && ( // 0 always can not be readable gap level.\n        !subGapLevel // If no header, always keep the sub gap level. Otherwise\n        // look weird in case `multipleSeries`.\n        || isSectionFragment(subBlock) && !subBlock.noHeader));\n      }\n    });\n    return gapLevel_1;\n  }\n\n  return 0;\n}\n\nfunction buildSection(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var noHeader = fragment.noHeader;\n  var gaps = getGap(getBlockGapLevel(fragment));\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n        subBlocks.reverse();\n      }\n  }\n\n  each(subBlocks, function (subBlock, idx) {\n    var valueFormatter = fragment.valueFormatter;\n    var subMarkupText = getBuilder(subBlock)( // Inherit valueFormatter\n    valueFormatter ? extend(extend({}, ctx), {\n      valueFormatter: valueFormatter\n    }) : ctx, subBlock, idx > 0 ? gaps.html : 0, toolTipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n  var subMarkupText = ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), noHeader ? topMarginForOuterGap : gaps.html);\n\n  if (noHeader) {\n    return subMarkupText;\n  }\n\n  var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n  var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n  if (ctx.renderMode === 'richText') {\n    return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n  } else {\n    return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n  }\n}\n\nfunction buildNameValue(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var renderMode = ctx.renderMode;\n  var noName = fragment.noName;\n  var noValue = fragment.noValue;\n  var noMarker = !fragment.markerType;\n  var name = fragment.name;\n  var useUTC = ctx.useUTC;\n\n  var valueFormatter = fragment.valueFormatter || ctx.valueFormatter || function (value) {\n    value = isArray(value) ? value : [value];\n    return map(value, function (val, idx) {\n      return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n    });\n  };\n\n  if (noName && noValue) {\n    return;\n  }\n\n  var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n  var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n  var valueTypeOption = fragment.valueType;\n  var readableValueList = noValue ? [] : valueFormatter(fragment.value);\n  var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n  var valueCloseToMarker = !noMarker && noName;\n\n  var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n      nameStyle = _a.nameStyle,\n      valueStyle = _a.valueStyle;\n\n  return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n  + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator,\n    valueFormatter: fragment.valueFormatter\n  };\n  return builder(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(gapLevel) {\n  return {\n    html: HTML_GAPS[gapLevel],\n    richText: RICH_TEXT_GAPS[gapLevel]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  valueList = isArray(valueList) ? valueList : [valueList];\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, values, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(isArray(values) ? values.join('  ') : values, styles);\n}\n\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexport { TooltipMarkupStyleCreator };"],"mappings":"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"},"metadata":{},"sourceType":"script"}