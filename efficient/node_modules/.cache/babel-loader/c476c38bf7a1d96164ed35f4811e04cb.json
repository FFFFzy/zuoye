{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProgressiveLayout = createProgressiveLayout;\nexports.getLayoutOnAxis = getLayoutOnAxis;\nexports.layout = layout;\nexports.makeColumnLayout = makeColumnLayout;\nexports.prepareLayoutBarSeries = prepareLayoutBarSeries;\nexports.retrieveColumnLayout = retrieveColumnLayout;\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\nvar _number = require(\"../util/number.js\");\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper.js\");\n\nvar _createRenderPlanner = _interopRequireDefault(require(\"../chart/helper/createRenderPlanner.js\"));\n\nvar _vendor = require(\"../util/vendor.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar STACK_PREFIX = '__ec_stack_';\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nfunction getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push((0, _util.defaults)({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n/**\n * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent\n * values.\n * This works for time axes, value axes, and log axes.\n * For a single time axis, return value is in the form like\n * {'x_0': [1000000]}.\n * The value of 1000000 is in milliseconds.\n */\n\n\nfunction getValueAxesMinGaps(barSeries) {\n  /**\n   * Map from axis.index to values.\n   * For a single time axis, axisValues is in the form like\n   * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.\n   * Items in axisValues[x], e.g. 1495555200000, are time values of all\n   * series.\n   */\n  var axisValues = {};\n  (0, _util.each)(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n\n    if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var key = baseAxis.dim + '_' + baseAxis.index;\n    var dimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));\n    var store = data.getStore();\n\n    for (var i = 0, cnt = store.count(); i < cnt; ++i) {\n      var value = store.get(dimIdx, i);\n\n      if (!axisValues[key]) {\n        // No previous data for the axis\n        axisValues[key] = [value];\n      } else {\n        // No value in previous series\n        axisValues[key].push(value);\n      } // Ignore duplicated time values in the same axis\n\n    }\n  });\n  var axisMinGaps = {};\n\n  for (var key in axisValues) {\n    if (axisValues.hasOwnProperty(key)) {\n      var valuesInAxis = axisValues[key];\n\n      if (valuesInAxis) {\n        // Sort axis values into ascending order to calculate gaps\n        valuesInAxis.sort(function (a, b) {\n          return a - b;\n        });\n        var min = null;\n\n        for (var j = 1; j < valuesInAxis.length; ++j) {\n          var delta = valuesInAxis[j] - valuesInAxis[j - 1];\n\n          if (delta > 0) {\n            // Ignore 0 delta because they are of the same axis value\n            min = min === null ? delta : Math.min(min, delta);\n          }\n        } // Set to null if only have one data\n\n\n        axisMinGaps[key] = min;\n      }\n    }\n  }\n\n  return axisMinGaps;\n}\n\nfunction makeColumnLayout(barSeries) {\n  var axisMinGaps = getValueAxesMinGaps(barSeries);\n  var seriesInfoList = [];\n  (0, _util.each)(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth;\n\n    if (baseAxis.type === 'category') {\n      bandWidth = baseAxis.getBandWidth();\n    } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {\n      var key = baseAxis.dim + '_' + baseAxis.index;\n      var minGap = axisMinGaps[key];\n      var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);\n      var scale = baseAxis.scale.getExtent();\n      var scaleSpan = Math.abs(scale[1] - scale[0]);\n      bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value\n    } else {\n      var data = seriesModel.getData();\n      bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    }\n\n    var barWidth = (0, _number.parsePercent)(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = (0, _number.parsePercent)(seriesModel.get('barMaxWidth'), bandWidth);\n    var barMinWidth = (0, _number.parsePercent)( // barMinWidth by default is 0.5 / 1 in cartesian. Because in value axis,\n    // the auto-calculated bar width might be less than 0.5 / 1.\n    seriesModel.get('barMinWidth') || (isInLargeMode(seriesModel) ? 0.5 : 1), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barMinWidth: barMinWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  (0, _util.each)(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: null,\n      gap: '20%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barMinWidth = seriesInfo.barMinWidth;\n    barMinWidth && (stacks[stackId].minWidth = barMinWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  (0, _util.each)(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGapPercent = columnsOnAxis.categoryGap;\n\n    if (categoryGapPercent == null) {\n      var columnCount = (0, _util.keys)(stacks).length; // More columns in one group\n      // the spaces between group is smaller. Or the column will be too thin.\n\n      categoryGapPercent = Math.max(35 - columnCount * 4, 15) + '%';\n    }\n\n    var categoryGap = (0, _number.parsePercent)(categoryGapPercent, bandWidth);\n    var barGapPercent = (0, _number.parsePercent)(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    (0, _util.each)(stacks, function (column) {\n      var maxWidth = column.maxWidth;\n      var minWidth = column.minWidth;\n\n      if (!column.width) {\n        var finalWidth = autoWidth;\n\n        if (maxWidth && maxWidth < finalWidth) {\n          finalWidth = Math.min(maxWidth, remainedWidth);\n        } // `minWidth` has higher priority. `minWidth` decide that wheter the\n        // bar is able to be visible. So `minWidth` should not be restricted\n        // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In\n        // the extreme cases for `value` axis, bars are allowed to overlap\n        // with each other if `minWidth` specified.\n\n\n        if (minWidth && minWidth > finalWidth) {\n          finalWidth = minWidth;\n        }\n\n        if (finalWidth !== autoWidth) {\n          column.width = finalWidth;\n          remainedWidth -= finalWidth + barGapPercent * finalWidth;\n          autoWidthCount--;\n        }\n      } else {\n        // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as\n        // CSS does. Becuase barWidth can be a percent value, where\n        // `barMaxWidth` can be used to restrict the final width.\n        var finalWidth = column.width;\n\n        if (maxWidth) {\n          finalWidth = Math.min(finalWidth, maxWidth);\n        } // `minWidth` has higher priority, as described above\n\n\n        if (minWidth) {\n          finalWidth = Math.max(finalWidth, minWidth);\n        }\n\n        column.width = finalWidth;\n        remainedWidth -= finalWidth + barGapPercent * finalWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    (0, _util.each)(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    (0, _util.each)(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        bandWidth: bandWidth,\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      return result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n\nfunction layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  (0, _util.each)(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    data.setLayout({\n      bandWidth: columnLayoutInfo.bandWidth,\n      offset: columnOffset,\n      size: columnWidth\n    });\n  });\n} // TODO: Do not support stack in large mode yet.\n\n\nfunction createProgressiveLayout(seriesType) {\n  return {\n    seriesType: seriesType,\n    plan: (0, _createRenderPlanner.default)(),\n    reset: function (seriesModel) {\n      if (!isOnCartesian(seriesModel)) {\n        return;\n      }\n\n      var data = seriesModel.getData();\n      var cartesian = seriesModel.coordinateSystem;\n      var baseAxis = cartesian.getBaseAxis();\n      var valueAxis = cartesian.getOtherAxis(baseAxis);\n      var valueDimIdx = data.getDimensionIndex(data.mapDimension(valueAxis.dim));\n      var baseDimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));\n      var drawBackground = seriesModel.get('showBackground', true);\n      var valueDim = data.mapDimension(valueAxis.dim);\n      var stackResultDim = data.getCalculationInfo('stackResultDimension');\n      var stacked = (0, _dataStackHelper.isDimensionStacked)(data, valueDim) && !!data.getCalculationInfo('stackedOnSeries');\n      var isValueAxisH = valueAxis.isHorizontal();\n      var valueAxisStart = getValueAxisStart(baseAxis, valueAxis);\n      var isLarge = isInLargeMode(seriesModel);\n      var barMinHeight = seriesModel.get('barMinHeight') || 0;\n      var stackedDimIdx = stackResultDim && data.getDimensionIndex(stackResultDim); // Layout info.\n\n      var columnWidth = data.getLayout('size');\n      var columnOffset = data.getLayout('offset');\n      return {\n        progress: function (params, data) {\n          var count = params.count;\n          var largePoints = isLarge && (0, _vendor.createFloat32Array)(count * 3);\n          var largeBackgroundPoints = isLarge && drawBackground && (0, _vendor.createFloat32Array)(count * 3);\n          var largeDataIndices = isLarge && (0, _vendor.createFloat32Array)(count);\n          var coordLayout = cartesian.master.getRect();\n          var bgSize = isValueAxisH ? coordLayout.width : coordLayout.height;\n          var dataIndex;\n          var store = data.getStore();\n          var idxOffset = 0;\n\n          while ((dataIndex = params.next()) != null) {\n            var value = store.get(stacked ? stackedDimIdx : valueDimIdx, dataIndex);\n            var baseValue = store.get(baseDimIdx, dataIndex);\n            var baseCoord = valueAxisStart;\n            var startValue = void 0; // Because of the barMinHeight, we can not use the value in\n            // stackResultDimension directly.\n\n            if (stacked) {\n              startValue = +value - store.get(valueDimIdx, dataIndex);\n            }\n\n            var x = void 0;\n            var y = void 0;\n            var width = void 0;\n            var height = void 0;\n\n            if (isValueAxisH) {\n              var coord = cartesian.dataToPoint([value, baseValue]);\n\n              if (stacked) {\n                var startCoord = cartesian.dataToPoint([startValue, baseValue]);\n                baseCoord = startCoord[0];\n              }\n\n              x = baseCoord;\n              y = coord[1] + columnOffset;\n              width = coord[0] - baseCoord;\n              height = columnWidth;\n\n              if (Math.abs(width) < barMinHeight) {\n                width = (width < 0 ? -1 : 1) * barMinHeight;\n              }\n            } else {\n              var coord = cartesian.dataToPoint([baseValue, value]);\n\n              if (stacked) {\n                var startCoord = cartesian.dataToPoint([baseValue, startValue]);\n                baseCoord = startCoord[1];\n              }\n\n              x = coord[0] + columnOffset;\n              y = baseCoord;\n              width = columnWidth;\n              height = coord[1] - baseCoord;\n\n              if (Math.abs(height) < barMinHeight) {\n                // Include zero to has a positive bar\n                height = (height <= 0 ? -1 : 1) * barMinHeight;\n              }\n            }\n\n            if (!isLarge) {\n              data.setItemLayout(dataIndex, {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n              });\n            } else {\n              largePoints[idxOffset] = x;\n              largePoints[idxOffset + 1] = y;\n              largePoints[idxOffset + 2] = isValueAxisH ? width : height;\n\n              if (largeBackgroundPoints) {\n                largeBackgroundPoints[idxOffset] = isValueAxisH ? coordLayout.x : x;\n                largeBackgroundPoints[idxOffset + 1] = isValueAxisH ? y : coordLayout.y;\n                largeBackgroundPoints[idxOffset + 2] = bgSize;\n              }\n\n              largeDataIndices[dataIndex] = dataIndex;\n            }\n\n            idxOffset += 3;\n          }\n\n          if (isLarge) {\n            data.setLayout({\n              largePoints: largePoints,\n              largeDataIndices: largeDataIndices,\n              largeBackgroundPoints: largeBackgroundPoints,\n              valueAxisHorizontal: isValueAxisH\n            });\n          }\n        }\n      };\n    }\n  };\n}\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n} // See cases in `test/bar-start.html` and `#7412`, `#8747`.\n\n\nfunction getValueAxisStart(baseAxis, valueAxis) {\n  return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));\n}","map":{"version":3,"names":["STACK_PREFIX","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","axis","dim","index","getLayoutOnAxis","opt","params","baseAxis","axisKey","type","bandWidth","getBandWidth","i","count","push","defaults","stackId","widthAndOffsets","doCalBarWidthAndOffset","result","item","offsetCenter","offset","width","prepareLayoutBarSeries","seriesType","ecModel","seriesModels","eachSeriesByType","isOnCartesian","getValueAxesMinGaps","barSeries","axisValues","each","cartesian","coordinateSystem","getBaseAxis","data","getData","key","dimIdx","getDimensionIndex","mapDimension","store","getStore","cnt","value","axisMinGaps","hasOwnProperty","valuesInAxis","sort","a","b","min","j","length","delta","Math","makeColumnLayout","seriesInfoList","axisExtent","getExtent","minGap","extentSpan","abs","scale","scaleSpan","barWidth","parsePercent","barMaxWidth","barMinWidth","isInLargeMode","barGap","barCategoryGap","columnsMap","seriesInfo","idx","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","minWidth","coordSysName","categoryGapPercent","columnCount","keys","max","barGapPercent","autoWidth","column","finalWidth","widthSum","lastColumn","retrieveColumnLayout","barWidthAndOffset","layout","columnLayoutInfo","columnOffset","columnWidth","setLayout","size","createProgressiveLayout","plan","createRenderPlanner","reset","valueAxis","getOtherAxis","valueDimIdx","baseDimIdx","drawBackground","valueDim","stackResultDim","getCalculationInfo","stacked","isDimensionStacked","isValueAxisH","isHorizontal","valueAxisStart","getValueAxisStart","isLarge","barMinHeight","stackedDimIdx","getLayout","progress","largePoints","createFloat32Array","largeBackgroundPoints","largeDataIndices","coordLayout","master","getRect","bgSize","height","dataIndex","idxOffset","next","baseValue","baseCoord","startValue","x","y","coord","dataToPoint","startCoord","setItemLayout","valueAxisHorizontal","pipelineContext","large","toGlobalCoord","dataToCoord"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/layout/barGrid.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { each, defaults, keys } from 'zrender/lib/core/util.js';\nimport { parsePercent } from '../util/number.js';\nimport { isDimensionStacked } from '../data/helper/dataStackHelper.js';\nimport createRenderPlanner from '../chart/helper/createRenderPlanner.js';\nimport { createFloat32Array } from '../util/vendor.js';\nvar STACK_PREFIX = '__ec_stack_';\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nexport function getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push(defaults({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\nexport function prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n/**\n * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent\n * values.\n * This works for time axes, value axes, and log axes.\n * For a single time axis, return value is in the form like\n * {'x_0': [1000000]}.\n * The value of 1000000 is in milliseconds.\n */\n\nfunction getValueAxesMinGaps(barSeries) {\n  /**\n   * Map from axis.index to values.\n   * For a single time axis, axisValues is in the form like\n   * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.\n   * Items in axisValues[x], e.g. 1495555200000, are time values of all\n   * series.\n   */\n  var axisValues = {};\n  each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n\n    if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var key = baseAxis.dim + '_' + baseAxis.index;\n    var dimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));\n    var store = data.getStore();\n\n    for (var i = 0, cnt = store.count(); i < cnt; ++i) {\n      var value = store.get(dimIdx, i);\n\n      if (!axisValues[key]) {\n        // No previous data for the axis\n        axisValues[key] = [value];\n      } else {\n        // No value in previous series\n        axisValues[key].push(value);\n      } // Ignore duplicated time values in the same axis\n\n    }\n  });\n  var axisMinGaps = {};\n\n  for (var key in axisValues) {\n    if (axisValues.hasOwnProperty(key)) {\n      var valuesInAxis = axisValues[key];\n\n      if (valuesInAxis) {\n        // Sort axis values into ascending order to calculate gaps\n        valuesInAxis.sort(function (a, b) {\n          return a - b;\n        });\n        var min = null;\n\n        for (var j = 1; j < valuesInAxis.length; ++j) {\n          var delta = valuesInAxis[j] - valuesInAxis[j - 1];\n\n          if (delta > 0) {\n            // Ignore 0 delta because they are of the same axis value\n            min = min === null ? delta : Math.min(min, delta);\n          }\n        } // Set to null if only have one data\n\n\n        axisMinGaps[key] = min;\n      }\n    }\n  }\n\n  return axisMinGaps;\n}\n\nexport function makeColumnLayout(barSeries) {\n  var axisMinGaps = getValueAxesMinGaps(barSeries);\n  var seriesInfoList = [];\n  each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth;\n\n    if (baseAxis.type === 'category') {\n      bandWidth = baseAxis.getBandWidth();\n    } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {\n      var key = baseAxis.dim + '_' + baseAxis.index;\n      var minGap = axisMinGaps[key];\n      var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);\n      var scale = baseAxis.scale.getExtent();\n      var scaleSpan = Math.abs(scale[1] - scale[0]);\n      bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value\n    } else {\n      var data = seriesModel.getData();\n      bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    }\n\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barMinWidth = parsePercent( // barMinWidth by default is 0.5 / 1 in cartesian. Because in value axis,\n    // the auto-calculated bar width might be less than 0.5 / 1.\n    seriesModel.get('barMinWidth') || (isInLargeMode(seriesModel) ? 0.5 : 1), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barMinWidth: barMinWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  each(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: null,\n      gap: '20%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barMinWidth = seriesInfo.barMinWidth;\n    barMinWidth && (stacks[stackId].minWidth = barMinWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGapPercent = columnsOnAxis.categoryGap;\n\n    if (categoryGapPercent == null) {\n      var columnCount = keys(stacks).length; // More columns in one group\n      // the spaces between group is smaller. Or the column will be too thin.\n\n      categoryGapPercent = Math.max(35 - columnCount * 4, 15) + '%';\n    }\n\n    var categoryGap = parsePercent(categoryGapPercent, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    each(stacks, function (column) {\n      var maxWidth = column.maxWidth;\n      var minWidth = column.minWidth;\n\n      if (!column.width) {\n        var finalWidth = autoWidth;\n\n        if (maxWidth && maxWidth < finalWidth) {\n          finalWidth = Math.min(maxWidth, remainedWidth);\n        } // `minWidth` has higher priority. `minWidth` decide that wheter the\n        // bar is able to be visible. So `minWidth` should not be restricted\n        // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In\n        // the extreme cases for `value` axis, bars are allowed to overlap\n        // with each other if `minWidth` specified.\n\n\n        if (minWidth && minWidth > finalWidth) {\n          finalWidth = minWidth;\n        }\n\n        if (finalWidth !== autoWidth) {\n          column.width = finalWidth;\n          remainedWidth -= finalWidth + barGapPercent * finalWidth;\n          autoWidthCount--;\n        }\n      } else {\n        // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as\n        // CSS does. Becuase barWidth can be a percent value, where\n        // `barMaxWidth` can be used to restrict the final width.\n        var finalWidth = column.width;\n\n        if (maxWidth) {\n          finalWidth = Math.min(finalWidth, maxWidth);\n        } // `minWidth` has higher priority, as described above\n\n\n        if (minWidth) {\n          finalWidth = Math.max(finalWidth, minWidth);\n        }\n\n        column.width = finalWidth;\n        remainedWidth -= finalWidth + barGapPercent * finalWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        bandWidth: bandWidth,\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      return result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n\nexport { retrieveColumnLayout };\nexport function layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  each(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    data.setLayout({\n      bandWidth: columnLayoutInfo.bandWidth,\n      offset: columnOffset,\n      size: columnWidth\n    });\n  });\n} // TODO: Do not support stack in large mode yet.\n\nexport function createProgressiveLayout(seriesType) {\n  return {\n    seriesType: seriesType,\n    plan: createRenderPlanner(),\n    reset: function (seriesModel) {\n      if (!isOnCartesian(seriesModel)) {\n        return;\n      }\n\n      var data = seriesModel.getData();\n      var cartesian = seriesModel.coordinateSystem;\n      var baseAxis = cartesian.getBaseAxis();\n      var valueAxis = cartesian.getOtherAxis(baseAxis);\n      var valueDimIdx = data.getDimensionIndex(data.mapDimension(valueAxis.dim));\n      var baseDimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));\n      var drawBackground = seriesModel.get('showBackground', true);\n      var valueDim = data.mapDimension(valueAxis.dim);\n      var stackResultDim = data.getCalculationInfo('stackResultDimension');\n      var stacked = isDimensionStacked(data, valueDim) && !!data.getCalculationInfo('stackedOnSeries');\n      var isValueAxisH = valueAxis.isHorizontal();\n      var valueAxisStart = getValueAxisStart(baseAxis, valueAxis);\n      var isLarge = isInLargeMode(seriesModel);\n      var barMinHeight = seriesModel.get('barMinHeight') || 0;\n      var stackedDimIdx = stackResultDim && data.getDimensionIndex(stackResultDim); // Layout info.\n\n      var columnWidth = data.getLayout('size');\n      var columnOffset = data.getLayout('offset');\n      return {\n        progress: function (params, data) {\n          var count = params.count;\n          var largePoints = isLarge && createFloat32Array(count * 3);\n          var largeBackgroundPoints = isLarge && drawBackground && createFloat32Array(count * 3);\n          var largeDataIndices = isLarge && createFloat32Array(count);\n          var coordLayout = cartesian.master.getRect();\n          var bgSize = isValueAxisH ? coordLayout.width : coordLayout.height;\n          var dataIndex;\n          var store = data.getStore();\n          var idxOffset = 0;\n\n          while ((dataIndex = params.next()) != null) {\n            var value = store.get(stacked ? stackedDimIdx : valueDimIdx, dataIndex);\n            var baseValue = store.get(baseDimIdx, dataIndex);\n            var baseCoord = valueAxisStart;\n            var startValue = void 0; // Because of the barMinHeight, we can not use the value in\n            // stackResultDimension directly.\n\n            if (stacked) {\n              startValue = +value - store.get(valueDimIdx, dataIndex);\n            }\n\n            var x = void 0;\n            var y = void 0;\n            var width = void 0;\n            var height = void 0;\n\n            if (isValueAxisH) {\n              var coord = cartesian.dataToPoint([value, baseValue]);\n\n              if (stacked) {\n                var startCoord = cartesian.dataToPoint([startValue, baseValue]);\n                baseCoord = startCoord[0];\n              }\n\n              x = baseCoord;\n              y = coord[1] + columnOffset;\n              width = coord[0] - baseCoord;\n              height = columnWidth;\n\n              if (Math.abs(width) < barMinHeight) {\n                width = (width < 0 ? -1 : 1) * barMinHeight;\n              }\n            } else {\n              var coord = cartesian.dataToPoint([baseValue, value]);\n\n              if (stacked) {\n                var startCoord = cartesian.dataToPoint([baseValue, startValue]);\n                baseCoord = startCoord[1];\n              }\n\n              x = coord[0] + columnOffset;\n              y = baseCoord;\n              width = columnWidth;\n              height = coord[1] - baseCoord;\n\n              if (Math.abs(height) < barMinHeight) {\n                // Include zero to has a positive bar\n                height = (height <= 0 ? -1 : 1) * barMinHeight;\n              }\n            }\n\n            if (!isLarge) {\n              data.setItemLayout(dataIndex, {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n              });\n            } else {\n              largePoints[idxOffset] = x;\n              largePoints[idxOffset + 1] = y;\n              largePoints[idxOffset + 2] = isValueAxisH ? width : height;\n\n              if (largeBackgroundPoints) {\n                largeBackgroundPoints[idxOffset] = isValueAxisH ? coordLayout.x : x;\n                largeBackgroundPoints[idxOffset + 1] = isValueAxisH ? y : coordLayout.y;\n                largeBackgroundPoints[idxOffset + 2] = bgSize;\n              }\n\n              largeDataIndices[dataIndex] = dataIndex;\n            }\n\n            idxOffset += 3;\n          }\n\n          if (isLarge) {\n            data.setLayout({\n              largePoints: largePoints,\n              largeDataIndices: largeDataIndices,\n              largeBackgroundPoints: largeBackgroundPoints,\n              valueAxisHorizontal: isValueAxisH\n            });\n          }\n        }\n      };\n    }\n  };\n}\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n} // See cases in `test/bar-start.html` and `#7412`, `#8747`.\n\n\nfunction getValueAxisStart(baseAxis, valueAxis) {\n  return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}