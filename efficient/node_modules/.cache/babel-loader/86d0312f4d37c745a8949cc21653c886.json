{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sunburstVisual;\n\nvar _color = require(\"zrender/lib/tool/color.js\");\n\nvar _util = require(\"zrender/lib/core/util.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction sunburstVisual(ecModel) {\n  var paletteScope = {}; // Default color strategy\n\n  function pickColor(node, seriesModel, treeHeight) {\n    // Choose color from palette based on the first level.\n    var current = node;\n\n    while (current && current.depth > 1) {\n      current = current.parentNode;\n    }\n\n    var color = seriesModel.getColorFromPalette(current.name || current.dataIndex + '', paletteScope);\n\n    if (node.depth > 1 && (0, _util.isString)(color)) {\n      // Lighter on the deeper level.\n      color = (0, _color.lift)(color, (node.depth - 1) / (treeHeight - 1) * 0.5);\n    }\n\n    return color;\n  }\n\n  ecModel.eachSeriesByType('sunburst', function (seriesModel) {\n    var data = seriesModel.getData();\n    var tree = data.tree;\n    tree.eachNode(function (node) {\n      var model = node.getModel();\n      var style = model.getModel('itemStyle').getItemStyle();\n\n      if (!style.fill) {\n        style.fill = pickColor(node, seriesModel, tree.root.height);\n      }\n\n      var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style');\n      (0, _util.extend)(existsStyle, style);\n    });\n  });\n}","map":{"version":3,"names":["sunburstVisual","ecModel","paletteScope","pickColor","node","seriesModel","treeHeight","current","depth","parentNode","color","getColorFromPalette","name","dataIndex","isString","lift","eachSeriesByType","data","getData","tree","eachNode","model","getModel","style","getItemStyle","fill","root","height","existsStyle","ensureUniqueItemVisual","extend"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/chart/sunburst/sunburstVisual.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { lift } from 'zrender/lib/tool/color.js';\nimport { extend, isString } from 'zrender/lib/core/util.js';\nexport default function sunburstVisual(ecModel) {\n  var paletteScope = {}; // Default color strategy\n\n  function pickColor(node, seriesModel, treeHeight) {\n    // Choose color from palette based on the first level.\n    var current = node;\n\n    while (current && current.depth > 1) {\n      current = current.parentNode;\n    }\n\n    var color = seriesModel.getColorFromPalette(current.name || current.dataIndex + '', paletteScope);\n\n    if (node.depth > 1 && isString(color)) {\n      // Lighter on the deeper level.\n      color = lift(color, (node.depth - 1) / (treeHeight - 1) * 0.5);\n    }\n\n    return color;\n  }\n\n  ecModel.eachSeriesByType('sunburst', function (seriesModel) {\n    var data = seriesModel.getData();\n    var tree = data.tree;\n    tree.eachNode(function (node) {\n      var model = node.getModel();\n      var style = model.getModel('itemStyle').getItemStyle();\n\n      if (!style.fill) {\n        style.fill = pickColor(node, seriesModel, tree.root.height);\n      }\n\n      var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style');\n      extend(existsStyle, style);\n    });\n  });\n}"],"mappings":";;;;;;;AA2CA;;AACA;;AA3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGe,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC9C,IAAIC,YAAY,GAAG,EAAnB,CAD8C,CACvB;;EAEvB,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkD;IAChD;IACA,IAAIC,OAAO,GAAGH,IAAd;;IAEA,OAAOG,OAAO,IAAIA,OAAO,CAACC,KAAR,GAAgB,CAAlC,EAAqC;MACnCD,OAAO,GAAGA,OAAO,CAACE,UAAlB;IACD;;IAED,IAAIC,KAAK,GAAGL,WAAW,CAACM,mBAAZ,CAAgCJ,OAAO,CAACK,IAAR,IAAgBL,OAAO,CAACM,SAAR,GAAoB,EAApE,EAAwEX,YAAxE,CAAZ;;IAEA,IAAIE,IAAI,CAACI,KAAL,GAAa,CAAb,IAAkB,IAAAM,cAAA,EAASJ,KAAT,CAAtB,EAAuC;MACrC;MACAA,KAAK,GAAG,IAAAK,WAAA,EAAKL,KAAL,EAAY,CAACN,IAAI,CAACI,KAAL,GAAa,CAAd,KAAoBF,UAAU,GAAG,CAAjC,IAAsC,GAAlD,CAAR;IACD;;IAED,OAAOI,KAAP;EACD;;EAEDT,OAAO,CAACe,gBAAR,CAAyB,UAAzB,EAAqC,UAAUX,WAAV,EAAuB;IAC1D,IAAIY,IAAI,GAAGZ,WAAW,CAACa,OAAZ,EAAX;IACA,IAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;IACAA,IAAI,CAACC,QAAL,CAAc,UAAUhB,IAAV,EAAgB;MAC5B,IAAIiB,KAAK,GAAGjB,IAAI,CAACkB,QAAL,EAAZ;MACA,IAAIC,KAAK,GAAGF,KAAK,CAACC,QAAN,CAAe,WAAf,EAA4BE,YAA5B,EAAZ;;MAEA,IAAI,CAACD,KAAK,CAACE,IAAX,EAAiB;QACfF,KAAK,CAACE,IAAN,GAAatB,SAAS,CAACC,IAAD,EAAOC,WAAP,EAAoBc,IAAI,CAACO,IAAL,CAAUC,MAA9B,CAAtB;MACD;;MAED,IAAIC,WAAW,GAAGX,IAAI,CAACY,sBAAL,CAA4BzB,IAAI,CAACS,SAAjC,EAA4C,OAA5C,CAAlB;MACA,IAAAiB,YAAA,EAAOF,WAAP,EAAoBL,KAApB;IACD,CAVD;EAWD,CAdD;AAeD"},"metadata":{},"sourceType":"script"}