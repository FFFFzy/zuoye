{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SERIES_UNIVERSAL_TRANSITION_PROP = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar zrUtil = _interopRequireWildcard(require(\"zrender/lib/core/util.js\"));\n\nvar _env = _interopRequireDefault(require(\"zrender/lib/core/env.js\"));\n\nvar modelUtil = _interopRequireWildcard(require(\"../util/model.js\"));\n\nvar _Component = _interopRequireDefault(require(\"./Component.js\"));\n\nvar _palette = require(\"./mixin/palette.js\");\n\nvar _dataFormat = require(\"../model/mixin/dataFormat.js\");\n\nvar _layout = require(\"../util/layout.js\");\n\nvar _task = require(\"../core/task.js\");\n\nvar _clazz = require(\"../util/clazz.js\");\n\nvar _sourceManager = require(\"../data/helper/sourceManager.js\");\n\nvar _seriesFormatTooltip = require(\"../component/tooltip/seriesFormatTooltip.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = modelUtil.makeInner();\n\nfunction getSelectionKey(data, dataIndex) {\n  return data.getName(dataIndex) || data.getId(dataIndex);\n}\n\nvar SERIES_UNIVERSAL_TRANSITION_PROP = '__universalTransitionEnabled';\nexports.SERIES_UNIVERSAL_TRANSITION_PROP = SERIES_UNIVERSAL_TRANSITION_PROP;\n\nvar SeriesModel =\n/** @class */\nfunction (_super) {\n  (0, _tslib.__extends)(SeriesModel, _super);\n\n  function SeriesModel() {\n    // [Caution]: Becuase this class or desecendants can be used as `XXX.extend(subProto)`,\n    // the class members must not be initialized in constructor or declaration place.\n    // Otherwise there is bad case:\n    //   class A {xxx = 1;}\n    //   enableClassExtend(A);\n    //   class B extends A {}\n    //   var C = B.extend({xxx: 5});\n    //   var c = new C();\n    //   console.log(c.xxx); // expect 5 but always 1.\n    var _this = _super !== null && _super.apply(this, arguments) || this; // ---------------------------------------\n    // Props about data selection\n    // ---------------------------------------\n\n\n    _this._selectedDataIndicesMap = {};\n    return _this;\n  }\n\n  SeriesModel.prototype.init = function (option, parentModel, ecModel) {\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = (0, _task.createTask)({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    var sourceManager = inner(this).sourceManager = new _sourceManager.SourceManager(this);\n    sourceManager.prepareSource();\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(data, 'getInitialData returned invalid data.');\n    }\n\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkSeriesData\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n  /**\n   * Util for merge default and theme to option\n   */\n\n\n  SeriesModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = (0, _layout.fetchLayoutMode)(this);\n    var inputPositionParams = layoutMode ? (0, _layout.getLayoutParams)(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (_Component.default.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      (0, _layout.mergeLayoutParam)(option, inputPositionParams, layoutMode);\n    }\n  };\n\n  SeriesModel.prototype.mergeOption = function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = (0, _layout.fetchLayoutMode)(this);\n\n    if (layoutMode) {\n      (0, _layout.mergeLayoutParam)(this.option, newSeriesOption, layoutMode);\n    }\n\n    var sourceManager = inner(this).sourceManager;\n    sourceManager.dirty();\n    sourceManager.prepareSource();\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n\n  SeriesModel.prototype.fillDataTextStyle = function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  };\n  /**\n   * Init a data structure from data related option in series\n   * Must be overriden.\n   */\n\n\n  SeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return;\n  };\n  /**\n   * Append data to list\n   */\n\n\n  SeriesModel.prototype.appendData = function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  };\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   */\n\n\n  SeriesModel.prototype.getData = function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  };\n\n  SeriesModel.prototype.getAllData = function () {\n    var mainData = this.getData();\n    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{\n      data: mainData\n    }];\n  };\n\n  SeriesModel.prototype.setData = function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n      // FIXME:TS never used, so comment it\n      // if (context.data !== data && task.modifyOutputEnd) {\n      //     task.setOutputEnd(data.count());\n      // }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  };\n\n  SeriesModel.prototype.getEncode = function () {\n    var encode = this.get('encode', true);\n\n    if (encode) {\n      return zrUtil.createHashMap(encode);\n    }\n  };\n\n  SeriesModel.prototype.getSourceManager = function () {\n    return inner(this).sourceManager;\n  };\n\n  SeriesModel.prototype.getSource = function () {\n    return this.getSourceManager().getSource();\n  };\n  /**\n   * Get data before processed\n   */\n\n\n  SeriesModel.prototype.getRawData = function () {\n    return inner(this).dataBeforeProcessed;\n  };\n\n  SeriesModel.prototype.getColorBy = function () {\n    var colorBy = this.get('colorBy');\n    return colorBy || 'series';\n  };\n\n  SeriesModel.prototype.isColorBySeries = function () {\n    return this.getColorBy() === 'series';\n  };\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n\n\n  SeriesModel.prototype.getBaseAxis = function () {\n    var coordSys = this.coordinateSystem; // @ts-ignore\n\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  };\n  /**\n   * Default tooltip formatter\n   *\n   * @param dataIndex\n   * @param multipleSeries\n   * @param dataType\n   * @param renderMode valid values: 'html'(by default) and 'richText'.\n   *        'html' is used for rendering tooltip in extra DOM form, and the result\n   *        string is used as DOM HTML content.\n   *        'richText' is used for rendering tooltip in rich text form, for those where\n   *        DOM operation is not supported.\n   * @return formatted tooltip with `html` and `markers`\n   *        Notice: The override method can also return string\n   */\n\n\n  SeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    return (0, _seriesFormatTooltip.defaultSeriesFormatTooltip)({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n  };\n\n  SeriesModel.prototype.isAnimationEnabled = function () {\n    var ecModel = this.ecModel; // Disable animation if using echarts in node but not give ssr flag.\n    // In ssr mode, renderToString will generate svg with css animation.\n\n    if (_env.default.node && !(ecModel && ecModel.ssr)) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return !!animationEnabled;\n  };\n\n  SeriesModel.prototype.restoreData = function () {\n    this.dataTask.dirty();\n  };\n\n  SeriesModel.prototype.getColorFromPalette = function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = _palette.PaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  };\n  /**\n   * Use `data.mapDimensionsAll(coordDim)` instead.\n   * @deprecated\n   */\n\n\n  SeriesModel.prototype.coordDimToDataDim = function (coordDim) {\n    return this.getRawData().mapDimensionsAll(coordDim);\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressive = function () {\n    return this.get('progressive');\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressiveThreshold = function () {\n    return this.get('progressiveThreshold');\n  }; // PENGING If selectedMode is null ?\n\n\n  SeriesModel.prototype.select = function (innerDataIndices, dataType) {\n    this._innerSelect(this.getData(dataType), innerDataIndices);\n  };\n\n  SeriesModel.prototype.unselect = function (innerDataIndices, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return;\n    }\n\n    var selectedMode = this.option.selectedMode;\n    var data = this.getData(dataType);\n\n    if (selectedMode === 'series' || selectedMap === 'all') {\n      this.option.selectedMap = {};\n      this._selectedDataIndicesMap = {};\n      return;\n    }\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      var dataIndex = innerDataIndices[i];\n      var nameOrId = getSelectionKey(data, dataIndex);\n      selectedMap[nameOrId] = false;\n      this._selectedDataIndicesMap[nameOrId] = -1;\n    }\n  };\n\n  SeriesModel.prototype.toggleSelect = function (innerDataIndices, dataType) {\n    var tmpArr = [];\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      tmpArr[0] = innerDataIndices[i];\n      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);\n    }\n  };\n\n  SeriesModel.prototype.getSelectedDataIndices = function () {\n    if (this.option.selectedMap === 'all') {\n      return [].slice.call(this.getData().getIndices());\n    }\n\n    var selectedDataIndicesMap = this._selectedDataIndicesMap;\n    var nameOrIds = zrUtil.keys(selectedDataIndicesMap);\n    var dataIndices = [];\n\n    for (var i = 0; i < nameOrIds.length; i++) {\n      var dataIndex = selectedDataIndicesMap[nameOrIds[i]];\n\n      if (dataIndex >= 0) {\n        dataIndices.push(dataIndex);\n      }\n    }\n\n    return dataIndices;\n  };\n\n  SeriesModel.prototype.isSelected = function (dataIndex, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return false;\n    }\n\n    var data = this.getData(dataType);\n    return (selectedMap === 'all' || selectedMap[getSelectionKey(data, dataIndex)]) && !data.getItemModel(dataIndex).get(['select', 'disabled']);\n  };\n\n  SeriesModel.prototype.isUniversalTransitionEnabled = function () {\n    if (this[SERIES_UNIVERSAL_TRANSITION_PROP]) {\n      return true;\n    }\n\n    var universalTransitionOpt = this.option.universalTransition; // Quick reject\n\n    if (!universalTransitionOpt) {\n      return false;\n    }\n\n    if (universalTransitionOpt === true) {\n      return true;\n    } // Can be simply 'universalTransition: true'\n\n\n    return universalTransitionOpt && universalTransitionOpt.enabled;\n  };\n\n  SeriesModel.prototype._innerSelect = function (data, innerDataIndices) {\n    var _a, _b;\n\n    var option = this.option;\n    var selectedMode = option.selectedMode;\n    var len = innerDataIndices.length;\n\n    if (!selectedMode || !len) {\n      return;\n    }\n\n    if (selectedMode === 'series') {\n      option.selectedMap = 'all';\n    } else if (selectedMode === 'multiple') {\n      if (!zrUtil.isObject(option.selectedMap)) {\n        option.selectedMap = {};\n      }\n\n      var selectedMap = option.selectedMap;\n\n      for (var i = 0; i < len; i++) {\n        var dataIndex = innerDataIndices[i]; // TODO diffrent types of data share same object.\n\n        var nameOrId = getSelectionKey(data, dataIndex);\n        selectedMap[nameOrId] = true;\n        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);\n      }\n    } else if (selectedMode === 'single' || selectedMode === true) {\n      var lastDataIndex = innerDataIndices[len - 1];\n      var nameOrId = getSelectionKey(data, lastDataIndex);\n      option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);\n      this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);\n    }\n  };\n\n  SeriesModel.prototype._initSelectedMapFromData = function (data) {\n    // Ignore select info in data if selectedMap exists.\n    // NOTE It's only for legacy usage. edge data is not supported.\n    if (this.option.selectedMap) {\n      return;\n    }\n\n    var dataIndices = [];\n\n    if (data.hasItemOption) {\n      data.each(function (idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem.selected) {\n          dataIndices.push(idx);\n        }\n      });\n    }\n\n    if (dataIndices.length > 0) {\n      this._innerSelect(data, dataIndices);\n    }\n  }; // /**\n  //  * @see {module:echarts/stream/Scheduler}\n  //  */\n  // abstract pipeTask: null\n\n\n  SeriesModel.registerClass = function (clz) {\n    return _Component.default.registerClass(clz);\n  };\n\n  SeriesModel.protoInitialize = function () {\n    var proto = SeriesModel.prototype;\n    proto.type = 'series.__base__';\n    proto.seriesIndex = 0;\n    proto.ignoreStyleOnData = false;\n    proto.hasSymbolVisual = false;\n    proto.defaultSymbol = 'circle'; // Make sure the values can be accessed!\n\n    proto.visualStyleAccessPath = 'itemStyle';\n    proto.visualDrawType = 'fill';\n  }();\n\n  return SeriesModel;\n}(_Component.default);\n\nzrUtil.mixin(SeriesModel, _dataFormat.DataFormatMixin);\nzrUtil.mixin(SeriesModel, _palette.PaletteMixin);\n(0, _clazz.mountExtend)(SeriesModel, _Component.default);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimensionsAll('seriesName');\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(zrUtil.concatArray(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataChange, seriesModel));\n  });\n}\n\nfunction onDataChange(seriesModel, newList) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd((newList || this).count());\n  }\n\n  return newList;\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nvar _default = SeriesModel;\nexports.default = _default;","map":{"version":3,"names":["inner","modelUtil","makeInner","getSelectionKey","data","dataIndex","getName","getId","SERIES_UNIVERSAL_TRANSITION_PROP","SeriesModel","_super","__extends","_this","apply","arguments","_selectedDataIndicesMap","prototype","init","option","parentModel","ecModel","seriesIndex","componentIndex","dataTask","createTask","count","dataTaskCount","reset","dataTaskReset","context","model","mergeDefaultAndTheme","sourceManager","SourceManager","prepareSource","getInitialData","wrapData","process","env","NODE_ENV","zrUtil","assert","dataBeforeProcessed","autoSeriesName","_initSelectedMapFromData","layoutMode","fetchLayoutMode","inputPositionParams","getLayoutParams","themeSubType","subType","ComponentModel","hasClass","merge","getTheme","get","getDefaultOption","defaultEmphasis","fillDataTextStyle","mergeLayoutParam","mergeOption","newSeriesOption","dirty","isTypedArray","props","i","length","label","appendData","params","getRawData","getData","dataType","task","getCurrentTask","getLinkedData","getAllData","mainData","getLinkedDataAll","setData","outputData","getEncode","encode","createHashMap","getSourceManager","getSource","getColorBy","colorBy","isColorBySeries","getBaseAxis","coordSys","coordinateSystem","formatTooltip","multipleSeries","defaultSeriesFormatTooltip","series","isAnimationEnabled","node","ssr","animationEnabled","getShallow","restoreData","getColorFromPalette","name","scope","requestColorNum","color","PaletteMixin","call","coordDimToDataDim","coordDim","mapDimensionsAll","getProgressive","getProgressiveThreshold","select","innerDataIndices","_innerSelect","unselect","selectedMap","selectedMode","nameOrId","toggleSelect","tmpArr","isSelected","getSelectedDataIndices","slice","getIndices","selectedDataIndicesMap","nameOrIds","keys","dataIndices","push","getItemModel","isUniversalTransitionEnabled","universalTransitionOpt","universalTransition","enabled","_a","_b","len","isObject","getRawIndex","lastDataIndex","hasItemOption","each","idx","rawItem","getRawDataItem","selected","registerClass","clz","protoInitialize","proto","type","ignoreStyleOnData","hasSymbolVisual","defaultSymbol","visualStyleAccessPath","visualDrawType","mixin","DataFormatMixin","mountExtend","seriesModel","isNameSpecified","getSeriesAutoName","dataDims","nameArr","dataDim","dimInfo","getDimensionInfo","displayName","join","cloneShallow","dataTaskProgress","param","end","concatArray","CHANGABLE_METHODS","DOWNSAMPLE_METHODS","methodName","wrapMethod","curry","onDataChange","newList","setOutputEnd","scheduler","pipeline","getPipeline","uid","currentTask","agentStubMap"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/model/Series.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport env from 'zrender/lib/core/env.js';\nimport * as modelUtil from '../util/model.js';\nimport ComponentModel from './Component.js';\nimport { PaletteMixin } from './mixin/palette.js';\nimport { DataFormatMixin } from '../model/mixin/dataFormat.js';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout.js';\nimport { createTask } from '../core/task.js';\nimport { mountExtend } from '../util/clazz.js';\nimport { SourceManager } from '../data/helper/sourceManager.js';\nimport { defaultSeriesFormatTooltip } from '../component/tooltip/seriesFormatTooltip.js';\nvar inner = modelUtil.makeInner();\n\nfunction getSelectionKey(data, dataIndex) {\n  return data.getName(dataIndex) || data.getId(dataIndex);\n}\n\nexport var SERIES_UNIVERSAL_TRANSITION_PROP = '__universalTransitionEnabled';\n\nvar SeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(SeriesModel, _super);\n\n  function SeriesModel() {\n    // [Caution]: Becuase this class or desecendants can be used as `XXX.extend(subProto)`,\n    // the class members must not be initialized in constructor or declaration place.\n    // Otherwise there is bad case:\n    //   class A {xxx = 1;}\n    //   enableClassExtend(A);\n    //   class B extends A {}\n    //   var C = B.extend({xxx: 5});\n    //   var c = new C();\n    //   console.log(c.xxx); // expect 5 but always 1.\n    var _this = _super !== null && _super.apply(this, arguments) || this; // ---------------------------------------\n    // Props about data selection\n    // ---------------------------------------\n\n\n    _this._selectedDataIndicesMap = {};\n    return _this;\n  }\n\n  SeriesModel.prototype.init = function (option, parentModel, ecModel) {\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    var sourceManager = inner(this).sourceManager = new SourceManager(this);\n    sourceManager.prepareSource();\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(data, 'getInitialData returned invalid data.');\n    }\n\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkSeriesData\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n  /**\n   * Util for merge default and theme to option\n   */\n\n\n  SeriesModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = fetchLayoutMode(this);\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  };\n\n  SeriesModel.prototype.mergeOption = function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = fetchLayoutMode(this);\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    var sourceManager = inner(this).sourceManager;\n    sourceManager.dirty();\n    sourceManager.prepareSource();\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n\n  SeriesModel.prototype.fillDataTextStyle = function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  };\n  /**\n   * Init a data structure from data related option in series\n   * Must be overriden.\n   */\n\n\n  SeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return;\n  };\n  /**\n   * Append data to list\n   */\n\n\n  SeriesModel.prototype.appendData = function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  };\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   */\n\n\n  SeriesModel.prototype.getData = function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  };\n\n  SeriesModel.prototype.getAllData = function () {\n    var mainData = this.getData();\n    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{\n      data: mainData\n    }];\n  };\n\n  SeriesModel.prototype.setData = function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n      // FIXME:TS never used, so comment it\n      // if (context.data !== data && task.modifyOutputEnd) {\n      //     task.setOutputEnd(data.count());\n      // }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  };\n\n  SeriesModel.prototype.getEncode = function () {\n    var encode = this.get('encode', true);\n\n    if (encode) {\n      return zrUtil.createHashMap(encode);\n    }\n  };\n\n  SeriesModel.prototype.getSourceManager = function () {\n    return inner(this).sourceManager;\n  };\n\n  SeriesModel.prototype.getSource = function () {\n    return this.getSourceManager().getSource();\n  };\n  /**\n   * Get data before processed\n   */\n\n\n  SeriesModel.prototype.getRawData = function () {\n    return inner(this).dataBeforeProcessed;\n  };\n\n  SeriesModel.prototype.getColorBy = function () {\n    var colorBy = this.get('colorBy');\n    return colorBy || 'series';\n  };\n\n  SeriesModel.prototype.isColorBySeries = function () {\n    return this.getColorBy() === 'series';\n  };\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n\n\n  SeriesModel.prototype.getBaseAxis = function () {\n    var coordSys = this.coordinateSystem; // @ts-ignore\n\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  };\n  /**\n   * Default tooltip formatter\n   *\n   * @param dataIndex\n   * @param multipleSeries\n   * @param dataType\n   * @param renderMode valid values: 'html'(by default) and 'richText'.\n   *        'html' is used for rendering tooltip in extra DOM form, and the result\n   *        string is used as DOM HTML content.\n   *        'richText' is used for rendering tooltip in rich text form, for those where\n   *        DOM operation is not supported.\n   * @return formatted tooltip with `html` and `markers`\n   *        Notice: The override method can also return string\n   */\n\n\n  SeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    return defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n  };\n\n  SeriesModel.prototype.isAnimationEnabled = function () {\n    var ecModel = this.ecModel; // Disable animation if using echarts in node but not give ssr flag.\n    // In ssr mode, renderToString will generate svg with css animation.\n\n    if (env.node && !(ecModel && ecModel.ssr)) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return !!animationEnabled;\n  };\n\n  SeriesModel.prototype.restoreData = function () {\n    this.dataTask.dirty();\n  };\n\n  SeriesModel.prototype.getColorFromPalette = function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = PaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  };\n  /**\n   * Use `data.mapDimensionsAll(coordDim)` instead.\n   * @deprecated\n   */\n\n\n  SeriesModel.prototype.coordDimToDataDim = function (coordDim) {\n    return this.getRawData().mapDimensionsAll(coordDim);\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressive = function () {\n    return this.get('progressive');\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressiveThreshold = function () {\n    return this.get('progressiveThreshold');\n  }; // PENGING If selectedMode is null ?\n\n\n  SeriesModel.prototype.select = function (innerDataIndices, dataType) {\n    this._innerSelect(this.getData(dataType), innerDataIndices);\n  };\n\n  SeriesModel.prototype.unselect = function (innerDataIndices, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return;\n    }\n\n    var selectedMode = this.option.selectedMode;\n    var data = this.getData(dataType);\n\n    if (selectedMode === 'series' || selectedMap === 'all') {\n      this.option.selectedMap = {};\n      this._selectedDataIndicesMap = {};\n      return;\n    }\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      var dataIndex = innerDataIndices[i];\n      var nameOrId = getSelectionKey(data, dataIndex);\n      selectedMap[nameOrId] = false;\n      this._selectedDataIndicesMap[nameOrId] = -1;\n    }\n  };\n\n  SeriesModel.prototype.toggleSelect = function (innerDataIndices, dataType) {\n    var tmpArr = [];\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      tmpArr[0] = innerDataIndices[i];\n      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);\n    }\n  };\n\n  SeriesModel.prototype.getSelectedDataIndices = function () {\n    if (this.option.selectedMap === 'all') {\n      return [].slice.call(this.getData().getIndices());\n    }\n\n    var selectedDataIndicesMap = this._selectedDataIndicesMap;\n    var nameOrIds = zrUtil.keys(selectedDataIndicesMap);\n    var dataIndices = [];\n\n    for (var i = 0; i < nameOrIds.length; i++) {\n      var dataIndex = selectedDataIndicesMap[nameOrIds[i]];\n\n      if (dataIndex >= 0) {\n        dataIndices.push(dataIndex);\n      }\n    }\n\n    return dataIndices;\n  };\n\n  SeriesModel.prototype.isSelected = function (dataIndex, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return false;\n    }\n\n    var data = this.getData(dataType);\n    return (selectedMap === 'all' || selectedMap[getSelectionKey(data, dataIndex)]) && !data.getItemModel(dataIndex).get(['select', 'disabled']);\n  };\n\n  SeriesModel.prototype.isUniversalTransitionEnabled = function () {\n    if (this[SERIES_UNIVERSAL_TRANSITION_PROP]) {\n      return true;\n    }\n\n    var universalTransitionOpt = this.option.universalTransition; // Quick reject\n\n    if (!universalTransitionOpt) {\n      return false;\n    }\n\n    if (universalTransitionOpt === true) {\n      return true;\n    } // Can be simply 'universalTransition: true'\n\n\n    return universalTransitionOpt && universalTransitionOpt.enabled;\n  };\n\n  SeriesModel.prototype._innerSelect = function (data, innerDataIndices) {\n    var _a, _b;\n\n    var option = this.option;\n    var selectedMode = option.selectedMode;\n    var len = innerDataIndices.length;\n\n    if (!selectedMode || !len) {\n      return;\n    }\n\n    if (selectedMode === 'series') {\n      option.selectedMap = 'all';\n    } else if (selectedMode === 'multiple') {\n      if (!zrUtil.isObject(option.selectedMap)) {\n        option.selectedMap = {};\n      }\n\n      var selectedMap = option.selectedMap;\n\n      for (var i = 0; i < len; i++) {\n        var dataIndex = innerDataIndices[i]; // TODO diffrent types of data share same object.\n\n        var nameOrId = getSelectionKey(data, dataIndex);\n        selectedMap[nameOrId] = true;\n        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);\n      }\n    } else if (selectedMode === 'single' || selectedMode === true) {\n      var lastDataIndex = innerDataIndices[len - 1];\n      var nameOrId = getSelectionKey(data, lastDataIndex);\n      option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);\n      this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);\n    }\n  };\n\n  SeriesModel.prototype._initSelectedMapFromData = function (data) {\n    // Ignore select info in data if selectedMap exists.\n    // NOTE It's only for legacy usage. edge data is not supported.\n    if (this.option.selectedMap) {\n      return;\n    }\n\n    var dataIndices = [];\n\n    if (data.hasItemOption) {\n      data.each(function (idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem.selected) {\n          dataIndices.push(idx);\n        }\n      });\n    }\n\n    if (dataIndices.length > 0) {\n      this._innerSelect(data, dataIndices);\n    }\n  }; // /**\n  //  * @see {module:echarts/stream/Scheduler}\n  //  */\n  // abstract pipeTask: null\n\n\n  SeriesModel.registerClass = function (clz) {\n    return ComponentModel.registerClass(clz);\n  };\n\n  SeriesModel.protoInitialize = function () {\n    var proto = SeriesModel.prototype;\n    proto.type = 'series.__base__';\n    proto.seriesIndex = 0;\n    proto.ignoreStyleOnData = false;\n    proto.hasSymbolVisual = false;\n    proto.defaultSymbol = 'circle'; // Make sure the values can be accessed!\n\n    proto.visualStyleAccessPath = 'itemStyle';\n    proto.visualDrawType = 'fill';\n  }();\n\n  return SeriesModel;\n}(ComponentModel);\n\nzrUtil.mixin(SeriesModel, DataFormatMixin);\nzrUtil.mixin(SeriesModel, PaletteMixin);\nmountExtend(SeriesModel, ComponentModel);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimensionsAll('seriesName');\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(zrUtil.concatArray(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataChange, seriesModel));\n  });\n}\n\nfunction onDataChange(seriesModel, newList) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd((newList || this).count());\n  }\n\n  return newList;\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nexport default SeriesModel;"],"mappings":"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"},"metadata":{},"sourceType":"script"}