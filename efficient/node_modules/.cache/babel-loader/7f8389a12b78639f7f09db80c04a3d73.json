{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignScaleTicks = alignScaleTicks;\n\nvar _number = require(\"../util/number.js\");\n\nvar _Interval = _interopRequireDefault(require(\"../scale/Interval.js\"));\n\nvar _axisHelper = require(\"./axisHelper.js\");\n\nvar _log = require(\"../util/log.js\");\n\nvar _helper = require(\"../scale/helper.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar mathLog = Math.log;\n\nfunction alignScaleTicks(scale, axisModel, alignToScale) {\n  var intervalScaleProto = _Interval.default.prototype; // NOTE: There is a precondition for log scale  here:\n  // In log scale we store _interval and _extent of exponent value.\n  // So if we use the method of InternalScale to set/get these data.\n  // It process the exponent value, which is linear and what we want here.\n\n  var alignToTicks = intervalScaleProto.getTicks.call(alignToScale);\n  var alignToNicedTicks = intervalScaleProto.getTicks.call(alignToScale, true);\n  var alignToSplitNumber = alignToTicks.length - 1;\n  var alignToInterval = intervalScaleProto.getInterval.call(alignToScale);\n  var scaleExtent = (0, _axisHelper.getScaleExtent)(scale, axisModel);\n  var rawExtent = scaleExtent.extent;\n  var isMinFixed = scaleExtent.fixMin;\n  var isMaxFixed = scaleExtent.fixMax;\n\n  if (scale.type === 'log') {\n    var logBase = mathLog(scale.base);\n    rawExtent = [mathLog(rawExtent[0]) / logBase, mathLog(rawExtent[1]) / logBase];\n  }\n\n  scale.setExtent(rawExtent[0], rawExtent[1]);\n  scale.calcNiceExtent({\n    splitNumber: alignToSplitNumber,\n    fixMin: isMinFixed,\n    fixMax: isMaxFixed\n  });\n  var extent = intervalScaleProto.getExtent.call(scale); // Need to update the rawExtent.\n  // Because value in rawExtent may be not parsed. e.g. 'dataMin', 'dataMax'\n\n  if (isMinFixed) {\n    rawExtent[0] = extent[0];\n  }\n\n  if (isMaxFixed) {\n    rawExtent[1] = extent[1];\n  }\n\n  var interval = intervalScaleProto.getInterval.call(scale);\n  var min = rawExtent[0];\n  var max = rawExtent[1];\n\n  if (isMinFixed && isMaxFixed) {\n    // User set min, max, divide to get new interval\n    interval = (max - min) / alignToSplitNumber;\n  } else if (isMinFixed) {\n    max = rawExtent[0] + interval * alignToSplitNumber; // User set min, expand extent on the other side\n\n    while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1])) {\n      interval = (0, _helper.increaseInterval)(interval);\n      max = rawExtent[0] + interval * alignToSplitNumber;\n    }\n  } else if (isMaxFixed) {\n    // User set max, expand extent on the other side\n    min = rawExtent[1] - interval * alignToSplitNumber;\n\n    while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0])) {\n      interval = (0, _helper.increaseInterval)(interval);\n      min = rawExtent[1] - interval * alignToSplitNumber;\n    }\n  } else {\n    var nicedSplitNumber = scale.getTicks().length - 1;\n\n    if (nicedSplitNumber > alignToSplitNumber) {\n      interval = (0, _helper.increaseInterval)(interval);\n    }\n\n    var range = interval * alignToSplitNumber;\n    max = Math.ceil(rawExtent[1] / interval) * interval;\n    min = (0, _number.round)(max - range); // Not change the result that crossing zero.\n\n    if (min < 0 && rawExtent[0] >= 0) {\n      min = 0;\n      max = (0, _number.round)(range);\n    } else if (max > 0 && rawExtent[1] <= 0) {\n      max = 0;\n      min = -(0, _number.round)(range);\n    }\n  } // Adjust min, max based on the extent of alignTo. When min or max is set in alignTo scale\n\n\n  var t0 = (alignToTicks[0].value - alignToNicedTicks[0].value) / alignToInterval;\n  var t1 = (alignToTicks[alignToSplitNumber].value - alignToNicedTicks[alignToSplitNumber].value) / alignToInterval; // NOTE: Must in setExtent -> setInterval -> setNiceExtent order.\n\n  intervalScaleProto.setExtent.call(scale, min + interval * t0, max + interval * t1);\n  intervalScaleProto.setInterval.call(scale, interval);\n\n  if (t0 || t1) {\n    intervalScaleProto.setNiceExtent.call(scale, min + interval, max - interval);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    var ticks = intervalScaleProto.getTicks.call(scale);\n\n    if (ticks[1] && (!(0, _helper.isValueNice)(interval) || (0, _number.getPrecisionSafe)(ticks[1].value) > (0, _number.getPrecisionSafe)(interval))) {\n      (0, _log.warn)( // eslint-disable-next-line\n      \"The ticks may be not readable when set min: \" + axisModel.get('min') + \", max: \" + axisModel.get('max') + \" and alignTicks: true\");\n    }\n  }\n}","map":{"version":3,"names":["mathLog","Math","log","alignScaleTicks","scale","axisModel","alignToScale","intervalScaleProto","IntervalScale","prototype","alignToTicks","getTicks","call","alignToNicedTicks","alignToSplitNumber","length","alignToInterval","getInterval","scaleExtent","getScaleExtent","rawExtent","extent","isMinFixed","fixMin","isMaxFixed","fixMax","type","logBase","base","setExtent","calcNiceExtent","splitNumber","getExtent","interval","min","max","isFinite","increaseInterval","nicedSplitNumber","range","ceil","round","t0","value","t1","setInterval","setNiceExtent","process","env","NODE_ENV","ticks","isValueNice","getPrecisionSafe","warn","get"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/coord/axisAlignTicks.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getPrecisionSafe, round } from '../util/number.js';\nimport IntervalScale from '../scale/Interval.js';\nimport { getScaleExtent } from './axisHelper.js';\nimport { warn } from '../util/log.js';\nimport { increaseInterval, isValueNice } from '../scale/helper.js';\nvar mathLog = Math.log;\nexport function alignScaleTicks(scale, axisModel, alignToScale) {\n  var intervalScaleProto = IntervalScale.prototype; // NOTE: There is a precondition for log scale  here:\n  // In log scale we store _interval and _extent of exponent value.\n  // So if we use the method of InternalScale to set/get these data.\n  // It process the exponent value, which is linear and what we want here.\n\n  var alignToTicks = intervalScaleProto.getTicks.call(alignToScale);\n  var alignToNicedTicks = intervalScaleProto.getTicks.call(alignToScale, true);\n  var alignToSplitNumber = alignToTicks.length - 1;\n  var alignToInterval = intervalScaleProto.getInterval.call(alignToScale);\n  var scaleExtent = getScaleExtent(scale, axisModel);\n  var rawExtent = scaleExtent.extent;\n  var isMinFixed = scaleExtent.fixMin;\n  var isMaxFixed = scaleExtent.fixMax;\n\n  if (scale.type === 'log') {\n    var logBase = mathLog(scale.base);\n    rawExtent = [mathLog(rawExtent[0]) / logBase, mathLog(rawExtent[1]) / logBase];\n  }\n\n  scale.setExtent(rawExtent[0], rawExtent[1]);\n  scale.calcNiceExtent({\n    splitNumber: alignToSplitNumber,\n    fixMin: isMinFixed,\n    fixMax: isMaxFixed\n  });\n  var extent = intervalScaleProto.getExtent.call(scale); // Need to update the rawExtent.\n  // Because value in rawExtent may be not parsed. e.g. 'dataMin', 'dataMax'\n\n  if (isMinFixed) {\n    rawExtent[0] = extent[0];\n  }\n\n  if (isMaxFixed) {\n    rawExtent[1] = extent[1];\n  }\n\n  var interval = intervalScaleProto.getInterval.call(scale);\n  var min = rawExtent[0];\n  var max = rawExtent[1];\n\n  if (isMinFixed && isMaxFixed) {\n    // User set min, max, divide to get new interval\n    interval = (max - min) / alignToSplitNumber;\n  } else if (isMinFixed) {\n    max = rawExtent[0] + interval * alignToSplitNumber; // User set min, expand extent on the other side\n\n    while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1])) {\n      interval = increaseInterval(interval);\n      max = rawExtent[0] + interval * alignToSplitNumber;\n    }\n  } else if (isMaxFixed) {\n    // User set max, expand extent on the other side\n    min = rawExtent[1] - interval * alignToSplitNumber;\n\n    while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0])) {\n      interval = increaseInterval(interval);\n      min = rawExtent[1] - interval * alignToSplitNumber;\n    }\n  } else {\n    var nicedSplitNumber = scale.getTicks().length - 1;\n\n    if (nicedSplitNumber > alignToSplitNumber) {\n      interval = increaseInterval(interval);\n    }\n\n    var range = interval * alignToSplitNumber;\n    max = Math.ceil(rawExtent[1] / interval) * interval;\n    min = round(max - range); // Not change the result that crossing zero.\n\n    if (min < 0 && rawExtent[0] >= 0) {\n      min = 0;\n      max = round(range);\n    } else if (max > 0 && rawExtent[1] <= 0) {\n      max = 0;\n      min = -round(range);\n    }\n  } // Adjust min, max based on the extent of alignTo. When min or max is set in alignTo scale\n\n\n  var t0 = (alignToTicks[0].value - alignToNicedTicks[0].value) / alignToInterval;\n  var t1 = (alignToTicks[alignToSplitNumber].value - alignToNicedTicks[alignToSplitNumber].value) / alignToInterval; // NOTE: Must in setExtent -> setInterval -> setNiceExtent order.\n\n  intervalScaleProto.setExtent.call(scale, min + interval * t0, max + interval * t1);\n  intervalScaleProto.setInterval.call(scale, interval);\n\n  if (t0 || t1) {\n    intervalScaleProto.setNiceExtent.call(scale, min + interval, max - interval);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    var ticks = intervalScaleProto.getTicks.call(scale);\n\n    if (ticks[1] && (!isValueNice(interval) || getPrecisionSafe(ticks[1].value) > getPrecisionSafe(interval))) {\n      warn( // eslint-disable-next-line\n      \"The ticks may be not readable when set min: \" + axisModel.get('min') + \", max: \" + axisModel.get('max') + \" and alignTicks: true\");\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}