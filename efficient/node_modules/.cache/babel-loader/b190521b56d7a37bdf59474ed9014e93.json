{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nvar _interopRequireWildcard = require(\"C:/Users/Z/Desktop/efficient/efficient/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphicComponentModel = void 0;\nexports.setKeyInfoToNewElOption = setKeyInfoToNewElOption;\n\nvar _tslib = require(\"tslib\");\n\nvar zrUtil = _interopRequireWildcard(require(\"zrender/lib/core/util.js\"));\n\nvar modelUtil = _interopRequireWildcard(require(\"../../util/model.js\"));\n\nvar _Component = _interopRequireDefault(require(\"../../model/Component.js\"));\n\nvar _layout = require(\"../../util/layout.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n;\n;\n;\n\nfunction setKeyInfoToNewElOption(resultItem, newElOption) {\n  var existElOption = resultItem.existing; // Set id and type after id assigned.\n\n  newElOption.id = resultItem.keyInfo.id;\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\n\n  if (newElOption.parentId == null) {\n    var newElParentOption = newElOption.parentOption;\n\n    if (newElParentOption) {\n      newElOption.parentId = newElParentOption.id;\n    } else if (existElOption) {\n      newElOption.parentId = existElOption.parentId;\n    }\n  } // Clear\n\n\n  newElOption.parentOption = null;\n}\n\nfunction isSetLoc(obj, props) {\n  var isSet;\n  zrUtil.each(props, function (prop) {\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n  });\n  return isSet;\n}\n\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\n  // Update existing options, for `getOption` feature.\n  var newElOptCopy = zrUtil.extend({}, newElOption);\n  var existElOption = existList[index];\n  var $action = newElOption.$action || 'merge';\n\n  if ($action === 'merge') {\n    if (existElOption) {\n      if (process.env.NODE_ENV !== 'production') {\n        var newType = newElOption.type;\n        zrUtil.assert(!newType || existElOption.type === newType, 'Please set $action: \"replace\" to change `type`');\n      } // We can ensure that newElOptCopy and existElOption are not\n      // the same object, so `merge` will not change newElOptCopy.\n\n\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\n\n      (0, _layout.mergeLayoutParam)(existElOption, newElOptCopy, {\n        ignoreSize: true\n      }); // Will be used in render.\n\n      (0, _layout.copyLayoutParams)(newElOption, existElOption); // Copy transition info to new option so it can be used in the transition.\n      // DO IT AFTER merge\n\n      copyTransitionInfo(newElOption, existElOption);\n      copyTransitionInfo(newElOption, existElOption, 'shape');\n      copyTransitionInfo(newElOption, existElOption, 'style');\n      copyTransitionInfo(newElOption, existElOption, 'extra'); // Copy clipPath\n\n      newElOption.clipPath = existElOption.clipPath;\n    } else {\n      existList[index] = newElOptCopy;\n    }\n  } else if ($action === 'replace') {\n    existList[index] = newElOptCopy;\n  } else if ($action === 'remove') {\n    // null will be cleaned later.\n    existElOption && (existList[index] = null);\n  }\n}\n\nvar TRANSITION_PROPS_TO_COPY = ['transition', 'enterFrom', 'leaveTo'];\nvar ROOT_TRANSITION_PROPS_TO_COPY = TRANSITION_PROPS_TO_COPY.concat(['enterAnimation', 'updateAnimation', 'leaveAnimation']);\n\nfunction copyTransitionInfo(target, source, targetProp) {\n  if (targetProp) {\n    if (!target[targetProp] && source[targetProp]) {\n      // TODO avoid creating this empty object when there is no transition configuration.\n      target[targetProp] = {};\n    }\n\n    target = target[targetProp];\n    source = source[targetProp];\n  }\n\n  if (!target || !source) {\n    return;\n  }\n\n  var props = targetProp ? TRANSITION_PROPS_TO_COPY : ROOT_TRANSITION_PROPS_TO_COPY;\n\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n\n    if (target[prop] == null && source[prop] != null) {\n      target[prop] = source[prop];\n    }\n  }\n}\n\nfunction setLayoutInfoToExist(existItem, newElOption) {\n  if (!existItem) {\n    return;\n  }\n\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\n\n  if (existItem.type === 'group') {\n    var existingGroupOpt = existItem;\n    var newGroupOpt = newElOption;\n    existingGroupOpt.width == null && (existingGroupOpt.width = newGroupOpt.width = 0);\n    existingGroupOpt.height == null && (existingGroupOpt.height = newGroupOpt.height = 0);\n  }\n}\n\nvar GraphicComponentModel =\n/** @class */\nfunction (_super) {\n  (0, _tslib.__extends)(GraphicComponentModel, _super);\n\n  function GraphicComponentModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GraphicComponentModel.type;\n    _this.preventAutoZ = true;\n    return _this;\n  }\n\n  GraphicComponentModel.prototype.mergeOption = function (option, ecModel) {\n    // Prevent default merge to elements\n    var elements = this.option.elements;\n    this.option.elements = null;\n\n    _super.prototype.mergeOption.call(this, option, ecModel);\n\n    this.option.elements = elements;\n  };\n\n  GraphicComponentModel.prototype.optionUpdated = function (newOption, isInit) {\n    var thisOption = this.option;\n    var newList = (isInit ? thisOption : newOption).elements;\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n    var flattenedList = [];\n\n    this._flatten(newList, flattenedList, null);\n\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList, 'normalMerge'); // Clear elOptionsToUpdate\n\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\n    zrUtil.each(mappingResult, function (resultItem, index) {\n      var newElOption = resultItem.newOption;\n\n      if (process.env.NODE_ENV !== 'production') {\n        zrUtil.assert(zrUtil.isObject(newElOption) || resultItem.existing, 'Empty graphic option definition');\n      }\n\n      if (!newElOption) {\n        return;\n      }\n\n      elOptionsToUpdate.push(newElOption);\n      setKeyInfoToNewElOption(resultItem, newElOption);\n      mergeNewElOptionToExist(existList, index, newElOption);\n      setLayoutInfoToExist(existList[index], newElOption);\n    }, this); // Clean\n\n    thisOption.elements = zrUtil.filter(existList, function (item) {\n      // $action should be volatile, otherwise option gotten from\n      // `getOption` will contain unexpected $action.\n      item && delete item.$action;\n      return item != null;\n    });\n  };\n  /**\n   * Convert\n   * [{\n   *  type: 'group',\n   *  id: 'xx',\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\n   * }]\n   * to\n   * [\n   *  {type: 'group', id: 'xx'},\n   *  {type: 'circle', parentId: 'xx'},\n   *  {type: 'polygon', parentId: 'xx'}\n   * ]\n   */\n\n\n  GraphicComponentModel.prototype._flatten = function (optionList, result, parentOption) {\n    zrUtil.each(optionList, function (option) {\n      if (!option) {\n        return;\n      }\n\n      if (parentOption) {\n        option.parentOption = parentOption;\n      }\n\n      result.push(option);\n      var children = option.children; // here we don't judge if option.type is `group`\n      // when new option doesn't provide `type`, it will cause that the children can't be updated.\n\n      if (children && children.length) {\n        this._flatten(children, result, option);\n      } // Deleting for JSON output, and for not affecting group creation.\n\n\n      delete option.children;\n    }, this);\n  }; // FIXME\n  // Pass to view using payload? setOption has a payload?\n\n\n  GraphicComponentModel.prototype.useElOptionsToUpdate = function () {\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\n\n    this._elOptionsToUpdate = null;\n    return els;\n  };\n\n  GraphicComponentModel.type = 'graphic';\n  GraphicComponentModel.defaultOption = {\n    elements: [] // parentId: null\n\n  };\n  return GraphicComponentModel;\n}(_Component.default);\n\nexports.GraphicComponentModel = GraphicComponentModel;","map":{"version":3,"names":["setKeyInfoToNewElOption","resultItem","newElOption","existElOption","existing","id","keyInfo","type","parentId","newElParentOption","parentOption","isSetLoc","obj","props","isSet","zrUtil","each","prop","mergeNewElOptionToExist","existList","index","newElOptCopy","extend","$action","process","env","NODE_ENV","newType","assert","merge","mergeLayoutParam","ignoreSize","copyLayoutParams","copyTransitionInfo","clipPath","TRANSITION_PROPS_TO_COPY","ROOT_TRANSITION_PROPS_TO_COPY","concat","target","source","targetProp","i","length","setLayoutInfoToExist","existItem","hv","existingGroupOpt","newGroupOpt","width","height","GraphicComponentModel","_super","__extends","_this","apply","arguments","preventAutoZ","prototype","mergeOption","option","ecModel","elements","call","optionUpdated","newOption","isInit","thisOption","newList","flattenedList","_flatten","mappingResult","modelUtil","mappingToExists","elOptionsToUpdate","_elOptionsToUpdate","isObject","push","filter","item","optionList","result","children","useElOptionsToUpdate","els","defaultOption","ComponentModel"],"sources":["C:/Users/Z/Desktop/efficient/node_modules/echarts/lib/component/graphic/GraphicModel.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as modelUtil from '../../util/model.js';\nimport ComponentModel from '../../model/Component.js';\nimport { copyLayoutParams, mergeLayoutParam } from '../../util/layout.js';\n;\n;\n;\nexport function setKeyInfoToNewElOption(resultItem, newElOption) {\n  var existElOption = resultItem.existing; // Set id and type after id assigned.\n\n  newElOption.id = resultItem.keyInfo.id;\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\n\n  if (newElOption.parentId == null) {\n    var newElParentOption = newElOption.parentOption;\n\n    if (newElParentOption) {\n      newElOption.parentId = newElParentOption.id;\n    } else if (existElOption) {\n      newElOption.parentId = existElOption.parentId;\n    }\n  } // Clear\n\n\n  newElOption.parentOption = null;\n}\n\nfunction isSetLoc(obj, props) {\n  var isSet;\n  zrUtil.each(props, function (prop) {\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n  });\n  return isSet;\n}\n\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\n  // Update existing options, for `getOption` feature.\n  var newElOptCopy = zrUtil.extend({}, newElOption);\n  var existElOption = existList[index];\n  var $action = newElOption.$action || 'merge';\n\n  if ($action === 'merge') {\n    if (existElOption) {\n      if (process.env.NODE_ENV !== 'production') {\n        var newType = newElOption.type;\n        zrUtil.assert(!newType || existElOption.type === newType, 'Please set $action: \"replace\" to change `type`');\n      } // We can ensure that newElOptCopy and existElOption are not\n      // the same object, so `merge` will not change newElOptCopy.\n\n\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\n\n      mergeLayoutParam(existElOption, newElOptCopy, {\n        ignoreSize: true\n      }); // Will be used in render.\n\n      copyLayoutParams(newElOption, existElOption); // Copy transition info to new option so it can be used in the transition.\n      // DO IT AFTER merge\n\n      copyTransitionInfo(newElOption, existElOption);\n      copyTransitionInfo(newElOption, existElOption, 'shape');\n      copyTransitionInfo(newElOption, existElOption, 'style');\n      copyTransitionInfo(newElOption, existElOption, 'extra'); // Copy clipPath\n\n      newElOption.clipPath = existElOption.clipPath;\n    } else {\n      existList[index] = newElOptCopy;\n    }\n  } else if ($action === 'replace') {\n    existList[index] = newElOptCopy;\n  } else if ($action === 'remove') {\n    // null will be cleaned later.\n    existElOption && (existList[index] = null);\n  }\n}\n\nvar TRANSITION_PROPS_TO_COPY = ['transition', 'enterFrom', 'leaveTo'];\nvar ROOT_TRANSITION_PROPS_TO_COPY = TRANSITION_PROPS_TO_COPY.concat(['enterAnimation', 'updateAnimation', 'leaveAnimation']);\n\nfunction copyTransitionInfo(target, source, targetProp) {\n  if (targetProp) {\n    if (!target[targetProp] && source[targetProp]) {\n      // TODO avoid creating this empty object when there is no transition configuration.\n      target[targetProp] = {};\n    }\n\n    target = target[targetProp];\n    source = source[targetProp];\n  }\n\n  if (!target || !source) {\n    return;\n  }\n\n  var props = targetProp ? TRANSITION_PROPS_TO_COPY : ROOT_TRANSITION_PROPS_TO_COPY;\n\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n\n    if (target[prop] == null && source[prop] != null) {\n      target[prop] = source[prop];\n    }\n  }\n}\n\nfunction setLayoutInfoToExist(existItem, newElOption) {\n  if (!existItem) {\n    return;\n  }\n\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\n\n  if (existItem.type === 'group') {\n    var existingGroupOpt = existItem;\n    var newGroupOpt = newElOption;\n    existingGroupOpt.width == null && (existingGroupOpt.width = newGroupOpt.width = 0);\n    existingGroupOpt.height == null && (existingGroupOpt.height = newGroupOpt.height = 0);\n  }\n}\n\nvar GraphicComponentModel =\n/** @class */\nfunction (_super) {\n  __extends(GraphicComponentModel, _super);\n\n  function GraphicComponentModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GraphicComponentModel.type;\n    _this.preventAutoZ = true;\n    return _this;\n  }\n\n  GraphicComponentModel.prototype.mergeOption = function (option, ecModel) {\n    // Prevent default merge to elements\n    var elements = this.option.elements;\n    this.option.elements = null;\n\n    _super.prototype.mergeOption.call(this, option, ecModel);\n\n    this.option.elements = elements;\n  };\n\n  GraphicComponentModel.prototype.optionUpdated = function (newOption, isInit) {\n    var thisOption = this.option;\n    var newList = (isInit ? thisOption : newOption).elements;\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n    var flattenedList = [];\n\n    this._flatten(newList, flattenedList, null);\n\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList, 'normalMerge'); // Clear elOptionsToUpdate\n\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\n    zrUtil.each(mappingResult, function (resultItem, index) {\n      var newElOption = resultItem.newOption;\n\n      if (process.env.NODE_ENV !== 'production') {\n        zrUtil.assert(zrUtil.isObject(newElOption) || resultItem.existing, 'Empty graphic option definition');\n      }\n\n      if (!newElOption) {\n        return;\n      }\n\n      elOptionsToUpdate.push(newElOption);\n      setKeyInfoToNewElOption(resultItem, newElOption);\n      mergeNewElOptionToExist(existList, index, newElOption);\n      setLayoutInfoToExist(existList[index], newElOption);\n    }, this); // Clean\n\n    thisOption.elements = zrUtil.filter(existList, function (item) {\n      // $action should be volatile, otherwise option gotten from\n      // `getOption` will contain unexpected $action.\n      item && delete item.$action;\n      return item != null;\n    });\n  };\n  /**\n   * Convert\n   * [{\n   *  type: 'group',\n   *  id: 'xx',\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\n   * }]\n   * to\n   * [\n   *  {type: 'group', id: 'xx'},\n   *  {type: 'circle', parentId: 'xx'},\n   *  {type: 'polygon', parentId: 'xx'}\n   * ]\n   */\n\n\n  GraphicComponentModel.prototype._flatten = function (optionList, result, parentOption) {\n    zrUtil.each(optionList, function (option) {\n      if (!option) {\n        return;\n      }\n\n      if (parentOption) {\n        option.parentOption = parentOption;\n      }\n\n      result.push(option);\n      var children = option.children; // here we don't judge if option.type is `group`\n      // when new option doesn't provide `type`, it will cause that the children can't be updated.\n\n      if (children && children.length) {\n        this._flatten(children, result, option);\n      } // Deleting for JSON output, and for not affecting group creation.\n\n\n      delete option.children;\n    }, this);\n  }; // FIXME\n  // Pass to view using payload? setOption has a payload?\n\n\n  GraphicComponentModel.prototype.useElOptionsToUpdate = function () {\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\n\n    this._elOptionsToUpdate = null;\n    return els;\n  };\n\n  GraphicComponentModel.type = 'graphic';\n  GraphicComponentModel.defaultOption = {\n    elements: [] // parentId: null\n\n  };\n  return GraphicComponentModel;\n}(ComponentModel);\n\nexport { GraphicComponentModel };"],"mappings":"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"},"metadata":{},"sourceType":"script"}